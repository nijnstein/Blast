//###########################################################################################################################
// BLAST v1.0.4c - Copyright Â© 2022 Rob Lemmens | NijnStein Software <rob.lemmens.s31 gmail com> All Rights Reserved   ^__^\#
// Unauthorized copying of this file, via any medium is strictly prohibited proprietary and confidential               (oo)\#
//                                                                                                                     (__) #
//###########################################################################################################################

// *** This file has been generated by a tool: modification is futile an will be assimilated ***

#if STANDALONE_VSBUILD
    using NSS.Blast.Standalone;
#else
    using UnityEngine;
    using Unity.Burst.CompilerServices;
#endif

using System;
using Unity.Burst;
using Unity.Mathematics;

     
#pragma warning disable CS1591

namespace NSS.Blast.External
{

    #region External Function Delegates
    public delegate void BlastEFDelegate(IntPtr engine, IntPtr data, IntPtr caller);
public delegate float BlastEFDelegate_F1_f1(IntPtr engine, IntPtr data, IntPtr caller, float p0);
public delegate float BlastEFDelegate_F1_f1f1(IntPtr engine, IntPtr data, IntPtr caller, float p0, float p1);
public delegate float BlastEFDelegate_F1_f1f1f1(IntPtr engine, IntPtr data, IntPtr caller, float p0, float p1, float p2);
public delegate float BlastEFDelegate_F1_f2(IntPtr engine, IntPtr data, IntPtr caller, float2 p0);
public delegate float BlastEFDelegate_F1_f2f2(IntPtr engine, IntPtr data, IntPtr caller, float2 p0, float2 p1);
public delegate float BlastEFDelegate_F1_f2f2f2(IntPtr engine, IntPtr data, IntPtr caller, float2 p0, float2 p1, float2 p2);
public delegate float BlastEFDelegate_F1_f3(IntPtr engine, IntPtr data, IntPtr caller, float3 p0);
public delegate float BlastEFDelegate_F1_f3f3(IntPtr engine, IntPtr data, IntPtr caller, float3 p0, float3 p1);
public delegate float BlastEFDelegate_F1_f3f3f3(IntPtr engine, IntPtr data, IntPtr caller, float3 p0, float3 p1, float3 p2);
public delegate float BlastEFDelegate_F1_f4(IntPtr engine, IntPtr data, IntPtr caller, float4 p0);
public delegate float BlastEFDelegate_F1_f4f4(IntPtr engine, IntPtr data, IntPtr caller, float4 p0, float4 p1);
public delegate float BlastEFDelegate_F1_f4f4f4(IntPtr engine, IntPtr data, IntPtr caller, float4 p0, float4 p1, float4 p2);
public delegate float2 BlastEFDelegate_F2_f2(IntPtr engine, IntPtr data, IntPtr caller, float2 p0);
public delegate float3 BlastEFDelegate_F3_f3(IntPtr engine, IntPtr data, IntPtr caller, float3 p0);
public delegate float4 BlastEFDelegate_F4_f4(IntPtr engine, IntPtr data, IntPtr caller, float4 p0);
public delegate void BlastEFDelegate_b32(IntPtr engine, IntPtr data, IntPtr caller, Bool32 p0);
public delegate Bool32 BlastEFDelegate_B32_b32(IntPtr engine, IntPtr data, IntPtr caller, Bool32 p0);
public delegate void BSEFDelegate();
public delegate float BSEFDelegate_F1_f1(float p0);
public delegate float BSEFDelegate_F1_f1f1(float p0, float p1);
public delegate float BSEFDelegate_F1_f1f1f1(float p0, float p1, float p2);
public delegate float BSEFDelegate_F1_f2(float2 p0);
public delegate float BSEFDelegate_F1_f2f2(float2 p0, float2 p1);
public delegate float BSEFDelegate_F1_f2f2f2(float2 p0, float2 p1, float2 p2);
public delegate float BSEFDelegate_F1_f3(float3 p0);
public delegate float BSEFDelegate_F1_f3f3(float3 p0, float3 p1);
public delegate float BSEFDelegate_F1_f3f3f3(float3 p0, float3 p1, float3 p2);
public delegate float BSEFDelegate_F1_f4(float4 p0);
public delegate float BSEFDelegate_F1_f4f4(float4 p0, float4 p1);
public delegate float BSEFDelegate_F1_f4f4f4(float4 p0, float4 p1, float4 p2);
public delegate float2 BSEFDelegate_F2_f2(float2 p0);
public delegate float3 BSEFDelegate_F3_f3(float3 p0);
public delegate float4 BSEFDelegate_F4_f4(float4 p0);
public delegate void BSEFDelegate_b32(Bool32 p0);
public delegate Bool32 BSEFDelegate_B32_b32(Bool32 p0);

    #endregion 

}

namespace NSS.Blast
{
    #region ScriptAPI registrations and function delegate enumeration
    
    public abstract partial class BlastScriptAPI
    {
        public int Register(External.BlastEFDelegate function, string name = null) { return RegisterFunction(function, name, 0, false, (byte)EFDelegateType.CALL_PROC_EF); }
public int Register(External.BlastEFDelegate_F1_f1 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f1); }
public int Register(External.BlastEFDelegate_F1_f1f1 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f1f1); }
public int Register(External.BlastEFDelegate_F1_f1f1f1 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f1f1f1); }
public int Register(External.BlastEFDelegate_F1_f2 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f2); }
public int Register(External.BlastEFDelegate_F1_f2f2 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f2f2); }
public int Register(External.BlastEFDelegate_F1_f2f2f2 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f2f2f2); }
public int Register(External.BlastEFDelegate_F1_f3 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f3); }
public int Register(External.BlastEFDelegate_F1_f3f3 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f3f3); }
public int Register(External.BlastEFDelegate_F1_f3f3f3 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f3f3f3); }
public int Register(External.BlastEFDelegate_F1_f4 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f4); }
public int Register(External.BlastEFDelegate_F1_f4f4 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f4f4); }
public int Register(External.BlastEFDelegate_F1_f4f4f4 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f4f4f4); }
public int Register(External.BlastEFDelegate_F2_f2 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_F2_f2); }
public int Register(External.BlastEFDelegate_F3_f3 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_F3_f3); }
public int Register(External.BlastEFDelegate_F4_f4 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_F4_f4); }
public int Register(External.BlastEFDelegate_b32 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_b32); }
public int Register(External.BlastEFDelegate_B32_b32 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_B32_b32); }
public int Register(External.BSEFDelegate function, string name = null) { return RegisterFunction(function, name, 0, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT); }
public int Register(External.BSEFDelegate_F1_f1 function, string name = null) { return RegisterFunction(function, name, 1, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f1); }
public int Register(External.BSEFDelegate_F1_f1f1 function, string name = null) { return RegisterFunction(function, name, 2, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f1f1); }
public int Register(External.BSEFDelegate_F1_f1f1f1 function, string name = null) { return RegisterFunction(function, name, 3, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f1f1f1); }
public int Register(External.BSEFDelegate_F1_f2 function, string name = null) { return RegisterFunction(function, name, 1, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f2); }
public int Register(External.BSEFDelegate_F1_f2f2 function, string name = null) { return RegisterFunction(function, name, 2, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f2f2); }
public int Register(External.BSEFDelegate_F1_f2f2f2 function, string name = null) { return RegisterFunction(function, name, 3, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f2f2f2); }
public int Register(External.BSEFDelegate_F1_f3 function, string name = null) { return RegisterFunction(function, name, 1, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f3); }
public int Register(External.BSEFDelegate_F1_f3f3 function, string name = null) { return RegisterFunction(function, name, 2, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f3f3); }
public int Register(External.BSEFDelegate_F1_f3f3f3 function, string name = null) { return RegisterFunction(function, name, 3, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f3f3f3); }
public int Register(External.BSEFDelegate_F1_f4 function, string name = null) { return RegisterFunction(function, name, 1, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f4); }
public int Register(External.BSEFDelegate_F1_f4f4 function, string name = null) { return RegisterFunction(function, name, 2, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f4f4); }
public int Register(External.BSEFDelegate_F1_f4f4f4 function, string name = null) { return RegisterFunction(function, name, 3, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f4f4f4); }
public int Register(External.BSEFDelegate_F2_f2 function, string name = null) { return RegisterFunction(function, name, 1, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F2_f2); }
public int Register(External.BSEFDelegate_F3_f3 function, string name = null) { return RegisterFunction(function, name, 1, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F3_f3); }
public int Register(External.BSEFDelegate_F4_f4 function, string name = null) { return RegisterFunction(function, name, 1, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F4_f4); }
public int Register(External.BSEFDelegate_b32 function, string name = null) { return RegisterFunction(function, name, 1, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_b32); }
public int Register(External.BSEFDelegate_B32_b32 function, string name = null) { return RegisterFunction(function, name, 1, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_B32_b32); }

    }

    public enum EFDelegateType : byte
    {
        CALL_PROC_EF = 0,
CALL_PROC_EF_F1_f1 = 1,
CALL_PROC_EF_F1_f1f1 = 2,
CALL_PROC_EF_F1_f1f1f1 = 3,
CALL_PROC_EF_F1_f2 = 4,
CALL_PROC_EF_F1_f2f2 = 5,
CALL_PROC_EF_F1_f2f2f2 = 6,
CALL_PROC_EF_F1_f3 = 7,
CALL_PROC_EF_F1_f3f3 = 8,
CALL_PROC_EF_F1_f3f3f3 = 9,
CALL_PROC_EF_F1_f4 = 10,
CALL_PROC_EF_F1_f4f4 = 11,
CALL_PROC_EF_F1_f4f4f4 = 12,
CALL_PROC_EF_F2_f2 = 13,
CALL_PROC_EF_F3_f3 = 14,
CALL_PROC_EF_F4_f4 = 15,
CALL_PROC_EF_b32 = 16,
CALL_PROC_EF_B32_b32 = 17,
CALL_PROC_EF_SHORT = 18,
CALL_PROC_EF_SHORT_F1_f1 = 19,
CALL_PROC_EF_SHORT_F1_f1f1 = 20,
CALL_PROC_EF_SHORT_F1_f1f1f1 = 21,
CALL_PROC_EF_SHORT_F1_f2 = 22,
CALL_PROC_EF_SHORT_F1_f2f2 = 23,
CALL_PROC_EF_SHORT_F1_f2f2f2 = 24,
CALL_PROC_EF_SHORT_F1_f3 = 25,
CALL_PROC_EF_SHORT_F1_f3f3 = 26,
CALL_PROC_EF_SHORT_F1_f3f3f3 = 27,
CALL_PROC_EF_SHORT_F1_f4 = 28,
CALL_PROC_EF_SHORT_F1_f4f4 = 29,
CALL_PROC_EF_SHORT_F1_f4f4f4 = 30,
CALL_PROC_EF_SHORT_F2_f2 = 31,
CALL_PROC_EF_SHORT_F3_f3 = 32,
CALL_PROC_EF_SHORT_F4_f4 = 33,
CALL_PROC_EF_SHORT_b32 = 34,
CALL_PROC_EF_SHORT_B32_b32 = 35,

    }

    #endregion 
}

namespace NSS.Blast.Interpretor
{
    #region External Function Calls 

    unsafe public partial struct BlastInterpretor
    {
        internal float4 CALL_EF(ref int code_pointer, in BlastScriptFunction function)
{
    int id = function.FunctionId;
    byte delegate_type = function.FunctionDelegateId;

    switch(delegate_type)
    {
        case 0: CALL_PROC_EF(ref code_pointer, id); return 0;
        case 1: return CALL_PROC_EF_F1_f1(ref code_pointer, id); 
        case 2: return CALL_PROC_EF_F1_f1f1(ref code_pointer, id); 
        case 3: return CALL_PROC_EF_F1_f1f1f1(ref code_pointer, id); 
        case 4: return CALL_PROC_EF_F1_f2(ref code_pointer, id); 
        case 5: return CALL_PROC_EF_F1_f2f2(ref code_pointer, id); 
        case 6: return CALL_PROC_EF_F1_f2f2f2(ref code_pointer, id); 
        case 7: return CALL_PROC_EF_F1_f3(ref code_pointer, id); 
        case 8: return CALL_PROC_EF_F1_f3f3(ref code_pointer, id); 
        case 9: return CALL_PROC_EF_F1_f3f3f3(ref code_pointer, id); 
        case 10: return CALL_PROC_EF_F1_f4(ref code_pointer, id); 
        case 11: return CALL_PROC_EF_F1_f4f4(ref code_pointer, id); 
        case 12: return CALL_PROC_EF_F1_f4f4f4(ref code_pointer, id); 
        case 13: return new float4(CALL_PROC_EF_F2_f2(ref code_pointer, id), 0, 0);
        case 14: return new float4(CALL_PROC_EF_F3_f3(ref code_pointer, id), 0); 
        case 15: return CALL_PROC_EF_F4_f4(ref code_pointer, id); 
        case 16: CALL_PROC_EF_b32(ref code_pointer, id); return 0;
        case 17: return CALL_PROC_EF_B32_b32(ref code_pointer, id).Single; 
        case 18: CALL_PROC_EF_SHORT(ref code_pointer, id); return 0;
        case 19: return CALL_PROC_EF_SHORT_F1_f1(ref code_pointer, id); 
        case 20: return CALL_PROC_EF_SHORT_F1_f1f1(ref code_pointer, id); 
        case 21: return CALL_PROC_EF_SHORT_F1_f1f1f1(ref code_pointer, id); 
        case 22: return CALL_PROC_EF_SHORT_F1_f2(ref code_pointer, id); 
        case 23: return CALL_PROC_EF_SHORT_F1_f2f2(ref code_pointer, id); 
        case 24: return CALL_PROC_EF_SHORT_F1_f2f2f2(ref code_pointer, id); 
        case 25: return CALL_PROC_EF_SHORT_F1_f3(ref code_pointer, id); 
        case 26: return CALL_PROC_EF_SHORT_F1_f3f3(ref code_pointer, id); 
        case 27: return CALL_PROC_EF_SHORT_F1_f3f3f3(ref code_pointer, id); 
        case 28: return CALL_PROC_EF_SHORT_F1_f4(ref code_pointer, id); 
        case 29: return CALL_PROC_EF_SHORT_F1_f4f4(ref code_pointer, id); 
        case 30: return CALL_PROC_EF_SHORT_F1_f4f4f4(ref code_pointer, id); 
        case 31: return new float4(CALL_PROC_EF_SHORT_F2_f2(ref code_pointer, id), 0, 0);
        case 32: return new float4(CALL_PROC_EF_SHORT_F3_f3(ref code_pointer, id), 0); 
        case 33: return CALL_PROC_EF_SHORT_F4_f4(ref code_pointer, id); 
        case 34: CALL_PROC_EF_SHORT_b32(ref code_pointer, id); return 0;
        case 35: return CALL_PROC_EF_SHORT_B32_b32(ref code_pointer, id).Single; 
    }

    return float.NaN;
}


        internal void CALL_PROC_EF(ref int code_pointer, in int function_id)
{
#if STANDALONE_VSBUILD
  (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr);
   return;
#else
   FunctionPointer<External.BlastEFDelegate> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr);
       return;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate: error calling external function with id {function_id}");
#endif
   return;
}
internal float CALL_PROC_EF_F1_f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f1).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f1>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float CALL_PROC_EF_F1_f1f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p2 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f1f1).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f1f1>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f1f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float CALL_PROC_EF_F1_f1f1f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p2 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p3 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f1f1f1).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2, p3);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f1f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f1f1f1>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2, p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f1f1f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float CALL_PROC_EF_F1_f2(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p1 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f2).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f2> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f2>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f2: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float CALL_PROC_EF_F1_f2f2(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p1 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p2 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f2f2).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f2f2> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f2f2>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f2f2: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float CALL_PROC_EF_F1_f2f2f2(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p1 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p2 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p3 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f2f2f2).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2, p3);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f2f2f2> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f2f2f2>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2, p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f2f2f2: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float CALL_PROC_EF_F1_f3(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p1 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f3).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f3>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f3: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float CALL_PROC_EF_F1_f3f3(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p1 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p2 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f3f3).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f3f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f3f3>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f3f3: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float CALL_PROC_EF_F1_f3f3f3(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p1 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p2 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p3 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f3f3f3).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2, p3);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f3f3f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f3f3f3>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2, p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f3f3f3: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float CALL_PROC_EF_F1_f4(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p1 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f4).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f4> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f4>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f4: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float CALL_PROC_EF_F1_f4f4(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p1 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p2 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f4f4).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f4f4> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f4f4>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f4f4: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float CALL_PROC_EF_F1_f4f4f4(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p1 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p2 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p3 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f4f4f4).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2, p3);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f4f4f4> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f4f4f4>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2, p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f4f4f4: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float2 CALL_PROC_EF_F2_f2(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p1 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   float2 result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F2_f2).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F2_f2> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F2_f2>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F2_f2: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float3 CALL_PROC_EF_F3_f3(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p1 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   float3 result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F3_f3).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F3_f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F3_f3>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F3_f3: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float4 CALL_PROC_EF_F4_f4(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p1 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   float4 result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F4_f4).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F4_f4> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F4_f4>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F4_f4: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal void CALL_PROC_EF_b32(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   Bool32 p1 = Bool32.From(math.select(((Bool32*)vdata)[0].Unsigned, ~((Bool32*)vdata)[0].Unsigned, is_negated));
#if STANDALONE_VSBUILD
  (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_b32).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
   return;
#else
   FunctionPointer<External.BlastEFDelegate_b32> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_b32>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
       return;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_b32: error calling external function with id {function_id}");
#endif
   return;
}
internal Bool32 CALL_PROC_EF_B32_b32(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   Bool32 p1 = Bool32.From(math.select(((Bool32*)vdata)[0].Unsigned, ~((Bool32*)vdata)[0].Unsigned, is_negated));
   Bool32 result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_B32_b32).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_B32_b32> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_B32_b32>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_B32_b32: error calling external function with id {function_id}");
#endif
   return Bool32.FailPattern;
}
internal void CALL_PROC_EF_SHORT(ref int code_pointer, in int function_id)
{
#if STANDALONE_VSBUILD
  (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate).Invoke();
   return;
#else
   FunctionPointer<External.BSEFDelegate> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       fp.Invoke();
       return;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate: error calling external function with id {function_id}");
#endif
   return;
}
internal float CALL_PROC_EF_SHORT_F1_f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f1).Invoke(p1);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f1> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f1>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float CALL_PROC_EF_SHORT_F1_f1f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p2 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f1f1).Invoke(p1, p2);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f1f1>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1, p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f1f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float CALL_PROC_EF_SHORT_F1_f1f1f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p2 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p3 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f1f1f1).Invoke(p1, p2, p3);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f1f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f1f1f1>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1, p2, p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f1f1f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float CALL_PROC_EF_SHORT_F1_f2(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p1 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f2).Invoke(p1);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f2> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f2>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f2: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float CALL_PROC_EF_SHORT_F1_f2f2(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p1 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p2 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f2f2).Invoke(p1, p2);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f2f2> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f2f2>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1, p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f2f2: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float CALL_PROC_EF_SHORT_F1_f2f2f2(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p1 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p2 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p3 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f2f2f2).Invoke(p1, p2, p3);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f2f2f2> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f2f2f2>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1, p2, p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f2f2f2: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float CALL_PROC_EF_SHORT_F1_f3(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p1 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f3).Invoke(p1);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f3> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f3>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f3: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float CALL_PROC_EF_SHORT_F1_f3f3(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p1 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p2 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f3f3).Invoke(p1, p2);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f3f3> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f3f3>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1, p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f3f3: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float CALL_PROC_EF_SHORT_F1_f3f3f3(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p1 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p2 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p3 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f3f3f3).Invoke(p1, p2, p3);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f3f3f3> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f3f3f3>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1, p2, p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f3f3f3: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float CALL_PROC_EF_SHORT_F1_f4(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p1 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f4).Invoke(p1);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f4> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f4>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f4: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float CALL_PROC_EF_SHORT_F1_f4f4(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p1 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p2 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f4f4).Invoke(p1, p2);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f4f4> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f4f4>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1, p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f4f4: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float CALL_PROC_EF_SHORT_F1_f4f4f4(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p1 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p2 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p3 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f4f4f4).Invoke(p1, p2, p3);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f4f4f4> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f4f4f4>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1, p2, p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f4f4f4: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float2 CALL_PROC_EF_SHORT_F2_f2(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p1 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   float2 result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F2_f2).Invoke(p1);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F2_f2> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F2_f2>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F2_f2: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float3 CALL_PROC_EF_SHORT_F3_f3(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p1 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   float3 result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F3_f3).Invoke(p1);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F3_f3> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F3_f3>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F3_f3: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal float4 CALL_PROC_EF_SHORT_F4_f4(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p1 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   float4 result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F4_f4).Invoke(p1);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F4_f4> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F4_f4>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F4_f4: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
internal void CALL_PROC_EF_SHORT_b32(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   Bool32 p1 = Bool32.From(math.select(((Bool32*)vdata)[0].Unsigned, ~((Bool32*)vdata)[0].Unsigned, is_negated));
#if STANDALONE_VSBUILD
  (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_b32).Invoke(p1);
   return;
#else
   FunctionPointer<External.BSEFDelegate_b32> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_b32>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       fp.Invoke(p1);
       return;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_b32: error calling external function with id {function_id}");
#endif
   return;
}
internal Bool32 CALL_PROC_EF_SHORT_B32_b32(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   Bool32 p1 = Bool32.From(math.select(((Bool32*)vdata)[0].Unsigned, ~((Bool32*)vdata)[0].Unsigned, is_negated));
   Bool32 result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_B32_b32).Invoke(p1);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_B32_b32> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_B32_b32>;
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_B32_b32: error calling external function with id {function_id}");
#endif
   return Bool32.FailPattern;
}

    }   

    #endregion 

}

namespace NSS.Blast.SSMD
{
    #region SSMD External Function Calls 

    unsafe public partial struct BlastSSMDInterpretor
    {
        internal float4 CALL_EF(ref int code_pointer, in BlastScriptFunction function)
{
    int id = function.FunctionId;
    byte delegate_type = function.FunctionDelegateId;

    switch(delegate_type)
    {
    }

    return float.NaN;
}


        
    }

    #endregion

}

#pragma warning restore CS1591
