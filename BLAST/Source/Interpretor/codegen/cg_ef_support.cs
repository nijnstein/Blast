//###########################################################################################################################
// BLAST v1.0.4c - Copyright Â© 2022 Rob Lemmens | NijnStein Software <rob.lemmens.s31 gmail com> All Rights Reserved   ^__^\#
// Unauthorized copying of this file, via any medium is strictly prohibited proprietary and confidential               (oo)\#
//                                                                                                                     (__) #
//###########################################################################################################################

// *** This file has been generated by BLAST: modification is futile an will be assimilated ***

#if STANDALONE_VSBUILD
    using NSS.Blast.Standalone;
#else
    using UnityEngine;
    using Unity.Burst.CompilerServices;
#endif

using System;
using System.Runtime.CompilerServices;
using Unity.Burst;
using Unity.Mathematics;

     
#pragma warning disable CS1591

namespace NSS.Blast.External
{

    #region External Function Delegates
    public delegate void BlastEFDelegate(IntPtr engine, IntPtr data, IntPtr caller);
public delegate float BlastEFDelegate_F1_f1(IntPtr engine, IntPtr data, IntPtr caller, float p0);
public delegate float BlastEFDelegate_F1_f1f1(IntPtr engine, IntPtr data, IntPtr caller, float p0, float p1);
public delegate float BlastEFDelegate_F1_f1f1f1(IntPtr engine, IntPtr data, IntPtr caller, float p0, float p1, float p2);
public delegate void BSEFDelegate();
public delegate float BSEFDelegate_F1_f1(float p0);
public delegate float BSEFDelegate_F1_f1f1(float p0, float p1);
unsafe public delegate void* BlastEFSSMDDelegate(IntPtr engine, IntPtr data);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f1(IntPtr engine, IntPtr data, float* result, [NoAlias]float* p0, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f1f1(IntPtr engine, IntPtr data, float* result, [NoAlias]float* p0, [NoAlias]float* p1, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f1f1f1(IntPtr engine, IntPtr data, float* result, [NoAlias]float* p0, [NoAlias]float* p1, [NoAlias]float* p2, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f2(IntPtr engine, IntPtr data, float* result, [NoAlias]float2* p0, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f2f2(IntPtr engine, IntPtr data, float* result, [NoAlias]float2* p0, [NoAlias]float2* p1, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f2f2f2(IntPtr engine, IntPtr data, float* result, [NoAlias]float2* p0, [NoAlias]float2* p1, [NoAlias]float2* p2, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f3(IntPtr engine, IntPtr data, float* result, [NoAlias]float3* p0, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f3f3(IntPtr engine, IntPtr data, float* result, [NoAlias]float3* p0, [NoAlias]float3* p1, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f3f3f3(IntPtr engine, IntPtr data, float* result, [NoAlias]float3* p0, [NoAlias]float3* p1, [NoAlias]float3* p2, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f4(IntPtr engine, IntPtr data, float* result, [NoAlias]float4* p0, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f4f4(IntPtr engine, IntPtr data, float* result, [NoAlias]float4* p0, [NoAlias]float4* p1, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f4f4f4(IntPtr engine, IntPtr data, float* result, [NoAlias]float4* p0, [NoAlias]float4* p1, [NoAlias]float4* p2, int ssmd_datacount);
unsafe public delegate float2* BlastEFSSMDDelegate_F2_f2(IntPtr engine, IntPtr data, float2* result, [NoAlias]float2* p0, int ssmd_datacount);
unsafe public delegate float2* BlastEFSSMDDelegate_F2_f2f2(IntPtr engine, IntPtr data, float2* result, [NoAlias]float2* p0, [NoAlias]float2* p1, int ssmd_datacount);
unsafe public delegate float2* BlastEFSSMDDelegate_F2_f2f2f2(IntPtr engine, IntPtr data, float2* result, [NoAlias]float2* p0, [NoAlias]float2* p1, [NoAlias]float2* p2, int ssmd_datacount);
unsafe public delegate float3* BlastEFSSMDDelegate_F3_f3(IntPtr engine, IntPtr data, float3* result, [NoAlias]float3* p0, int ssmd_datacount);
unsafe public delegate float3* BlastEFSSMDDelegate_F3_f3f3(IntPtr engine, IntPtr data, float3* result, [NoAlias]float3* p0, [NoAlias]float3* p1, int ssmd_datacount);
unsafe public delegate float3* BlastEFSSMDDelegate_F3_f3f3f3(IntPtr engine, IntPtr data, float3* result, [NoAlias]float3* p0, [NoAlias]float3* p1, [NoAlias]float3* p2, int ssmd_datacount);
unsafe public delegate float4* BlastEFSSMDDelegate_F4_f4(IntPtr engine, IntPtr data, float4* result, [NoAlias]float4* p0, int ssmd_datacount);
unsafe public delegate void* BlastEFSSMDDelegate_b32(IntPtr engine, IntPtr data, [NoAlias]Bool32* p0, int ssmd_datacount);
unsafe public delegate Bool32* BlastEFSSMDDelegate_B32_b32(IntPtr engine, IntPtr data, Bool32* result, [NoAlias]Bool32* p0, int ssmd_datacount);
unsafe public delegate Bool32* BlastEFSSMDDelegate_B32_b32f4f1(IntPtr engine, IntPtr data, Bool32* result, [NoAlias]Bool32* p0, [NoAlias]float4* p1, [NoAlias]float* p2, int ssmd_datacount);

    #endregion 

}

namespace NSS.Blast
{
    #region ScriptAPI registrations and function delegate enumeration
    
    public abstract partial class BlastScriptAPI
    {
        public int Register(External.BlastEFDelegate function, string name = null) { return RegisterFunction(function, name, 0, false, (byte)EFDelegateType.CALL_PROC_EF); }
public int Register(External.BlastEFDelegate_F1_f1 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f1); }
public int Register(External.BlastEFDelegate_F1_f1f1 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f1f1); }
public int Register(External.BlastEFDelegate_F1_f1f1f1 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f1f1f1); }
public int Register(External.BSEFDelegate function, string name = null) { return RegisterFunction(function, name, 0, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT); }
public int Register(External.BSEFDelegate_F1_f1 function, string name = null) { return RegisterFunction(function, name, 1, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f1); }
public int Register(External.BSEFDelegate_F1_f1f1 function, string name = null) { return RegisterFunction(function, name, 2, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f1f1); }
public int Register(External.BlastEFSSMDDelegate function, string name = null) { return RegisterFunction(function, name, 0, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD); }
public int Register(External.BlastEFSSMDDelegate_F1_f1 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f1); }
public int Register(External.BlastEFSSMDDelegate_F1_f1f1 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f1f1); }
public int Register(External.BlastEFSSMDDelegate_F1_f1f1f1 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f1f1f1); }
public int Register(External.BlastEFSSMDDelegate_F1_f2 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f2); }
public int Register(External.BlastEFSSMDDelegate_F1_f2f2 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f2f2); }
public int Register(External.BlastEFSSMDDelegate_F1_f2f2f2 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f2f2f2); }
public int Register(External.BlastEFSSMDDelegate_F1_f3 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f3); }
public int Register(External.BlastEFSSMDDelegate_F1_f3f3 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f3f3); }
public int Register(External.BlastEFSSMDDelegate_F1_f3f3f3 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f3f3f3); }
public int Register(External.BlastEFSSMDDelegate_F1_f4 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f4); }
public int Register(External.BlastEFSSMDDelegate_F1_f4f4 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f4f4); }
public int Register(External.BlastEFSSMDDelegate_F1_f4f4f4 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f4f4f4); }
public int Register(External.BlastEFSSMDDelegate_F2_f2 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F2_f2); }
public int Register(External.BlastEFSSMDDelegate_F2_f2f2 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F2_f2f2); }
public int Register(External.BlastEFSSMDDelegate_F2_f2f2f2 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F2_f2f2f2); }
public int Register(External.BlastEFSSMDDelegate_F3_f3 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F3_f3); }
public int Register(External.BlastEFSSMDDelegate_F3_f3f3 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F3_f3f3); }
public int Register(External.BlastEFSSMDDelegate_F3_f3f3f3 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F3_f3f3f3); }
public int Register(External.BlastEFSSMDDelegate_F4_f4 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F4_f4); }
public int Register(External.BlastEFSSMDDelegate_b32 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_b32); }
public int Register(External.BlastEFSSMDDelegate_B32_b32 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_B32_b32); }
public int Register(External.BlastEFSSMDDelegate_B32_b32f4f1 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_B32_b32f4f1); }

    }

    public enum EFDelegateType : byte
    {
        CALL_PROC_EF = 0,
CALL_PROC_EF_F1_f1 = 1,
CALL_PROC_EF_F1_f1f1 = 2,
CALL_PROC_EF_F1_f1f1f1 = 3,
CALL_PROC_EF_SHORT = 4,
CALL_PROC_EF_SHORT_F1_f1 = 5,
CALL_PROC_EF_SHORT_F1_f1f1 = 6,
CALL_PROC_EF_SSMD = 7,
CALL_PROC_EF_SSMD_F1_f1 = 8,
CALL_PROC_EF_SSMD_F1_f1f1 = 9,
CALL_PROC_EF_SSMD_F1_f1f1f1 = 10,
CALL_PROC_EF_SSMD_F1_f2 = 11,
CALL_PROC_EF_SSMD_F1_f2f2 = 12,
CALL_PROC_EF_SSMD_F1_f2f2f2 = 13,
CALL_PROC_EF_SSMD_F1_f3 = 14,
CALL_PROC_EF_SSMD_F1_f3f3 = 15,
CALL_PROC_EF_SSMD_F1_f3f3f3 = 16,
CALL_PROC_EF_SSMD_F1_f4 = 17,
CALL_PROC_EF_SSMD_F1_f4f4 = 18,
CALL_PROC_EF_SSMD_F1_f4f4f4 = 19,
CALL_PROC_EF_SSMD_F2_f2 = 20,
CALL_PROC_EF_SSMD_F2_f2f2 = 21,
CALL_PROC_EF_SSMD_F2_f2f2f2 = 22,
CALL_PROC_EF_SSMD_F3_f3 = 23,
CALL_PROC_EF_SSMD_F3_f3f3 = 24,
CALL_PROC_EF_SSMD_F3_f3f3f3 = 25,
CALL_PROC_EF_SSMD_F4_f4 = 26,
CALL_PROC_EF_SSMD_b32 = 27,
CALL_PROC_EF_SSMD_B32_b32 = 28,
CALL_PROC_EF_SSMD_B32_b32f4f1 = 29,

    }

    #endregion 
}

namespace NSS.Blast.Interpretor
{
    #region External Function Calls 

    unsafe public partial struct BlastInterpretor
    {
        internal float4 CALL_EF(ref int code_pointer, in BlastScriptFunction function)
{
    int id = function.FunctionId;
    byte delegate_type = function.FunctionDelegateId;

    switch(delegate_type)
    {
        case 0: CALL_PROC_EF(ref code_pointer, id); return 0;
        case 1: return CALL_PROC_EF_F1_f1(ref code_pointer, id); 
        case 2: return CALL_PROC_EF_F1_f1f1(ref code_pointer, id); 
        case 3: return CALL_PROC_EF_F1_f1f1f1(ref code_pointer, id); 
        case 4: CALL_PROC_EF_SHORT(ref code_pointer, id); return 0;
        case 5: return CALL_PROC_EF_SHORT_F1_f1(ref code_pointer, id); 
        case 6: return CALL_PROC_EF_SHORT_F1_f1f1(ref code_pointer, id); 
    }

    return float.NaN;
}


        [MethodImpl(MethodImplOptions.AggressiveInlining)]
internal void CALL_PROC_EF(ref int code_pointer, in int function_id)
{
#if STANDALONE_VSBUILD
  (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr);
   return;
#else
   FunctionPointer<External.BlastEFDelegate> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr);
       return;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate: error calling external function with id {function_id}");
#endif
   return;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_F1_f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f1).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_F1_f1f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p2 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f1f1).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f1f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_F1_f1f1f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p2 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p3 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f1f1f1).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2, p3);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f1f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f1f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2, p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f1f1f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal void CALL_PROC_EF_SHORT(ref int code_pointer, in int function_id)
{
#if STANDALONE_VSBUILD
  (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate).Invoke();
   return;
#else
   FunctionPointer<External.BSEFDelegate> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       fp.Invoke();
       return;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate: error calling external function with id {function_id}");
#endif
   return;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_SHORT_F1_f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f1).Invoke(p1);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f1> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_SHORT_F1_f1f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p2 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f1f1).Invoke(p1, p2);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1, p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f1f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}

    }   

    #endregion 

}

namespace NSS.Blast.SSMD
{
    #region SSMD External Function Calls 

    unsafe public partial struct BlastSSMDInterpretor
    {
        internal void* CALL_EF(ref int code_pointer, in BlastScriptFunction function, int ssmd_datacount, void* temp)
{
    int id = function.FunctionId;
    byte delegate_type = function.FunctionDelegateId;

    switch(delegate_type)
    {
        case 7: CALL_PROC_EF_SSMD(ref code_pointer, id); return null;
        case 8: return CALL_PROC_EF_SSMD_F1_f1(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 9: return CALL_PROC_EF_SSMD_F1_f1f1(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 10: return CALL_PROC_EF_SSMD_F1_f1f1f1(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 11: return CALL_PROC_EF_SSMD_F1_f2(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 12: return CALL_PROC_EF_SSMD_F1_f2f2(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 13: return CALL_PROC_EF_SSMD_F1_f2f2f2(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 14: return CALL_PROC_EF_SSMD_F1_f3(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 15: return CALL_PROC_EF_SSMD_F1_f3f3(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 16: return CALL_PROC_EF_SSMD_F1_f3f3f3(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 17: return CALL_PROC_EF_SSMD_F1_f4(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 18: return CALL_PROC_EF_SSMD_F1_f4f4(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 19: return CALL_PROC_EF_SSMD_F1_f4f4f4(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 20: return CALL_PROC_EF_SSMD_F2_f2(ref code_pointer, id, ssmd_datacount, (float2*)temp);
        case 21: return CALL_PROC_EF_SSMD_F2_f2f2(ref code_pointer, id, ssmd_datacount, (float2*)temp);
        case 22: return CALL_PROC_EF_SSMD_F2_f2f2f2(ref code_pointer, id, ssmd_datacount, (float2*)temp);
        case 23: return CALL_PROC_EF_SSMD_F3_f3(ref code_pointer, id, ssmd_datacount, (float3*)temp); 
        case 24: return CALL_PROC_EF_SSMD_F3_f3f3(ref code_pointer, id, ssmd_datacount, (float3*)temp); 
        case 25: return CALL_PROC_EF_SSMD_F3_f3f3f3(ref code_pointer, id, ssmd_datacount, (float3*)temp); 
        case 26: return CALL_PROC_EF_SSMD_F4_f4(ref code_pointer, id, ssmd_datacount, (float4*)temp); 
        case 27: CALL_PROC_EF_SSMD_b32(ref code_pointer, id, ssmd_datacount); return null;
        case 28: return CALL_PROC_EF_SSMD_B32_b32(ref code_pointer, id, ssmd_datacount, (Bool32*)temp); 
        case 29: return CALL_PROC_EF_SSMD_B32_b32f4f1(ref code_pointer, id, ssmd_datacount, (Bool32*)temp); 
    }

    return null;
}


        [MethodImpl(MethodImplOptions.AggressiveInlining)]
internal void CALL_PROC_EF_SSMD(ref int code_pointer, in int function_id)
{
#if STANDALONE_VSBUILD
  (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate).Invoke((IntPtr)engine_ptr, environment_ptr);
   return;
#else
   FunctionPointer<External.BlastEFSSMDDelegate> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       fp.Invoke((IntPtr)engine_ptr, environment_ptr);
       return;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate: error calling external function with id {function_id}");
#endif
   return;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f1(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float* p1 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p1);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f1).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f1: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f1f1(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float* p1 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p1);
   float* p2 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p2);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f1f1).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f1f1: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f1f1f1(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float* p1 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p1);
   float* p2 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p2);
   float* p3 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p3);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f1f1f1).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f1f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f1f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f1f1f1: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f2(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float2* p1 = stackalloc float2[ssmd_datacount];
   pop_fx_into_ref<float2>(ref code_pointer, p1);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f2).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f2> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f2: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f2f2(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float2* p1 = stackalloc float2[ssmd_datacount];
   pop_fx_into_ref<float2>(ref code_pointer, p1);
   float2* p2 = stackalloc float2[ssmd_datacount];
   pop_fx_into_ref<float2>(ref code_pointer, p2);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f2f2).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f2f2> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f2f2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f2f2: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f2f2f2(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float2* p1 = stackalloc float2[ssmd_datacount];
   pop_fx_into_ref<float2>(ref code_pointer, p1);
   float2* p2 = stackalloc float2[ssmd_datacount];
   pop_fx_into_ref<float2>(ref code_pointer, p2);
   float2* p3 = stackalloc float2[ssmd_datacount];
   pop_fx_into_ref<float2>(ref code_pointer, p3);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f2f2f2).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f2f2f2> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f2f2f2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f2f2f2: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f3(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float3* p1 = stackalloc float3[ssmd_datacount];
   pop_fx_into_ref<float3>(ref code_pointer, p1);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f3).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f3: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f3f3(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float3* p1 = stackalloc float3[ssmd_datacount];
   pop_fx_into_ref<float3>(ref code_pointer, p1);
   float3* p2 = stackalloc float3[ssmd_datacount];
   pop_fx_into_ref<float3>(ref code_pointer, p2);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f3f3).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f3f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f3f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f3f3: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f3f3f3(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float3* p1 = stackalloc float3[ssmd_datacount];
   pop_fx_into_ref<float3>(ref code_pointer, p1);
   float3* p2 = stackalloc float3[ssmd_datacount];
   pop_fx_into_ref<float3>(ref code_pointer, p2);
   float3* p3 = stackalloc float3[ssmd_datacount];
   pop_fx_into_ref<float3>(ref code_pointer, p3);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f3f3f3).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f3f3f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f3f3f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f3f3f3: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f4(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float4* p1 = stackalloc float4[ssmd_datacount];
   pop_fx_into_ref<float4>(ref code_pointer, p1);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f4).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f4> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f4: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f4f4(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float4* p1 = stackalloc float4[ssmd_datacount];
   pop_fx_into_ref<float4>(ref code_pointer, p1);
   float4* p2 = stackalloc float4[ssmd_datacount];
   pop_fx_into_ref<float4>(ref code_pointer, p2);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f4f4).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f4f4> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f4f4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f4f4: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f4f4f4(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float4* p1 = stackalloc float4[ssmd_datacount];
   pop_fx_into_ref<float4>(ref code_pointer, p1);
   float4* p2 = stackalloc float4[ssmd_datacount];
   pop_fx_into_ref<float4>(ref code_pointer, p2);
   float4* p3 = stackalloc float4[ssmd_datacount];
   pop_fx_into_ref<float4>(ref code_pointer, p3);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f4f4f4).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f4f4f4> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f4f4f4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f4f4f4: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float2* CALL_PROC_EF_SSMD_F2_f2(ref int code_pointer, in int function_id, int ssmd_datacount, float2* result)
{
   float2* p1 = stackalloc float2[ssmd_datacount];
   pop_fx_into_ref<float2>(ref code_pointer, p1);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F2_f2).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F2_f2> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F2_f2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F2_f2: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float2* CALL_PROC_EF_SSMD_F2_f2f2(ref int code_pointer, in int function_id, int ssmd_datacount, float2* result)
{
   float2* p1 = stackalloc float2[ssmd_datacount];
   pop_fx_into_ref<float2>(ref code_pointer, p1);
   float2* p2 = stackalloc float2[ssmd_datacount];
   pop_fx_into_ref<float2>(ref code_pointer, p2);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F2_f2f2).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F2_f2f2> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F2_f2f2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F2_f2f2: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float2* CALL_PROC_EF_SSMD_F2_f2f2f2(ref int code_pointer, in int function_id, int ssmd_datacount, float2* result)
{
   float2* p1 = stackalloc float2[ssmd_datacount];
   pop_fx_into_ref<float2>(ref code_pointer, p1);
   float2* p2 = stackalloc float2[ssmd_datacount];
   pop_fx_into_ref<float2>(ref code_pointer, p2);
   float2* p3 = stackalloc float2[ssmd_datacount];
   pop_fx_into_ref<float2>(ref code_pointer, p3);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F2_f2f2f2).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F2_f2f2f2> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F2_f2f2f2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F2_f2f2f2: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float3* CALL_PROC_EF_SSMD_F3_f3(ref int code_pointer, in int function_id, int ssmd_datacount, float3* result)
{
   float3* p1 = stackalloc float3[ssmd_datacount];
   pop_fx_into_ref<float3>(ref code_pointer, p1);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F3_f3).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F3_f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F3_f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F3_f3: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float3* CALL_PROC_EF_SSMD_F3_f3f3(ref int code_pointer, in int function_id, int ssmd_datacount, float3* result)
{
   float3* p1 = stackalloc float3[ssmd_datacount];
   pop_fx_into_ref<float3>(ref code_pointer, p1);
   float3* p2 = stackalloc float3[ssmd_datacount];
   pop_fx_into_ref<float3>(ref code_pointer, p2);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F3_f3f3).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F3_f3f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F3_f3f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F3_f3f3: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float3* CALL_PROC_EF_SSMD_F3_f3f3f3(ref int code_pointer, in int function_id, int ssmd_datacount, float3* result)
{
   float3* p1 = stackalloc float3[ssmd_datacount];
   pop_fx_into_ref<float3>(ref code_pointer, p1);
   float3* p2 = stackalloc float3[ssmd_datacount];
   pop_fx_into_ref<float3>(ref code_pointer, p2);
   float3* p3 = stackalloc float3[ssmd_datacount];
   pop_fx_into_ref<float3>(ref code_pointer, p3);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F3_f3f3f3).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F3_f3f3f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F3_f3f3f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F3_f3f3f3: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float4* CALL_PROC_EF_SSMD_F4_f4(ref int code_pointer, in int function_id, int ssmd_datacount, float4* result)
{
   float4* p1 = stackalloc float4[ssmd_datacount];
   pop_fx_into_ref<float4>(ref code_pointer, p1);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F4_f4).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F4_f4> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F4_f4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F4_f4: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal void CALL_PROC_EF_SSMD_b32(ref int code_pointer, in int function_id, int ssmd_datacount)
{
   float* p1 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p1);
#if STANDALONE_VSBUILD
  (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_b32).Invoke((IntPtr)engine_ptr, environment_ptr, (Bool32*)(p1), ssmd_datacount);
   return;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_b32> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_b32>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       fp.Invoke((IntPtr)engine_ptr, environment_ptr, (Bool32*)(p1), ssmd_datacount);
       return;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_b32: error calling external function with id {function_id}");
#endif
   return;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal Bool32* CALL_PROC_EF_SSMD_B32_b32(ref int code_pointer, in int function_id, int ssmd_datacount, Bool32* result)
{
   float* p1 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p1);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_B32_b32).Invoke((IntPtr)engine_ptr, environment_ptr, result, (Bool32*)(p1), ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_B32_b32> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_B32_b32>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, (Bool32*)(p1), ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_B32_b32: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal Bool32* CALL_PROC_EF_SSMD_B32_b32f4f1(ref int code_pointer, in int function_id, int ssmd_datacount, Bool32* result)
{
   float* p1 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p1);
   float4* p2 = stackalloc float4[ssmd_datacount];
   pop_fx_into_ref<float4>(ref code_pointer, p2);
   float* p3 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p3);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_B32_b32f4f1).Invoke((IntPtr)engine_ptr, environment_ptr, result, (Bool32*)(p1), p2, p3, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_B32_b32f4f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_B32_b32f4f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, (Bool32*)(p1), p2, p3, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_B32_b32f4f1: error calling external function with id {function_id}");
#endif
   return null;
}

    }

    #endregion

}

#pragma warning restore CS1591
