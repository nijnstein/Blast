//###########################################################################################################################
// BLAST v1.0.4c - Copyright Â© 2022 Rob Lemmens | NijnStein Software <rob.lemmens.s31 gmail com> All Rights Reserved   ^__^\#
// Unauthorized copying of this file, via any medium is strictly prohibited proprietary and confidential               (oo)\#
//                                                                                                                     (__) #
//###########################################################################################################################

// *** This file has been generated by BLAST: modification is futile an will be assimilated ***

#if STANDALONE_VSBUILD
    using NSS.Blast.Standalone;
#else
    using UnityEngine;
    using Unity.Burst.CompilerServices;
#endif

using System;
using System.Runtime.CompilerServices;
using Unity.Burst;
using Unity.Mathematics;

     
#pragma warning disable CS1591

namespace NSS.Blast.External
{

    #region External Function Delegates
    unsafe public delegate void BlastEFDelegate([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller);
unsafe public delegate float BlastEFDelegate_F1([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller);
unsafe public delegate float2* BlastEFDelegate_F2([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]float2* result);
unsafe public delegate float3* BlastEFDelegate_F3([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]float3* result);
unsafe public delegate float4* BlastEFDelegate_F4([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]float4* result);
unsafe public delegate int BlastEFDelegate_I1([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller);
unsafe public delegate int2* BlastEFDelegate_I2([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]int2* result);
unsafe public delegate int3* BlastEFDelegate_I3([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]int3* result);
unsafe public delegate int4* BlastEFDelegate_I4([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]int4* result);
unsafe public delegate Bool32* BlastEFDelegate_B32([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]Bool32* result);
unsafe public delegate float BlastEFDelegate_F1_f1([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, float p0);
unsafe public delegate float BlastEFDelegate_F1_f1f1([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, float p0, float p1);
unsafe public delegate float BlastEFDelegate_F1_f1f1f1([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, float p0, float p1, float p2);
unsafe public delegate float BlastEFDelegate_F1_f1f1f1f1([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, float p0, float p1, float p2, float p3);
unsafe public delegate float BlastEFDelegate_F1_f1f1f1f1f1([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, float p0, float p1, float p2, float p3, float p4);
unsafe public delegate float BlastEFDelegate_F1_f1f1f1f1f1f1([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, float p0, float p1, float p2, float p3, float p4, float p5);
unsafe public delegate float BlastEFDelegate_F1_f1f1f1f1f1f1f1([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, float p0, float p1, float p2, float p3, float p4, float p5, float p6);
unsafe public delegate float BlastEFDelegate_F1_f1f1f1f1f1f1f1f1([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7);
unsafe public delegate float BlastEFDelegate_F1_f2([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]float2* p0);
unsafe public delegate float BlastEFDelegate_F1_f2f2([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]float2* p0, [NoAlias]float2* p1);
unsafe public delegate float BlastEFDelegate_F1_f2f2f2([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]float2* p0, [NoAlias]float2* p1, [NoAlias]float2* p2);
unsafe public delegate float BlastEFDelegate_F1_f3([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]float3* p0);
unsafe public delegate float BlastEFDelegate_F1_f3f3([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]float3* p0, [NoAlias]float3* p1);
unsafe public delegate float BlastEFDelegate_F1_f3f3f3([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]float3* p0, [NoAlias]float3* p1, [NoAlias]float3* p2);
unsafe public delegate float BlastEFDelegate_F1_f4([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]float4* p0);
unsafe public delegate float BlastEFDelegate_F1_f4f4([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]float4* p0, [NoAlias]float4* p1);
unsafe public delegate float BlastEFDelegate_F1_f4f4f4([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]float4* p0, [NoAlias]float4* p1, [NoAlias]float4* p2);
unsafe public delegate float2* BlastEFDelegate_F2_f2([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]float2* result, [NoAlias]float2* p0);
unsafe public delegate float2* BlastEFDelegate_F2_f2f2([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]float2* result, [NoAlias]float2* p0, [NoAlias]float2* p1);
unsafe public delegate float2* BlastEFDelegate_F2_f2f2f2([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]float2* result, [NoAlias]float2* p0, [NoAlias]float2* p1, [NoAlias]float2* p2);
unsafe public delegate float3* BlastEFDelegate_F3_f3([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]float3* result, [NoAlias]float3* p0);
unsafe public delegate float3* BlastEFDelegate_F3_f3f3([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]float3* result, [NoAlias]float3* p0, [NoAlias]float3* p1);
unsafe public delegate float3* BlastEFDelegate_F3_f3f3f3([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]float3* result, [NoAlias]float3* p0, [NoAlias]float3* p1, [NoAlias]float3* p2);
unsafe public delegate float4* BlastEFDelegate_F4_f4([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]float4* result, [NoAlias]float4* p0);
unsafe public delegate float4* BlastEFDelegate_F4_f4f4([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]float4* result, [NoAlias]float4* p0, [NoAlias]float4* p1);
unsafe public delegate float4* BlastEFDelegate_F4_f4f4f4([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]float4* result, [NoAlias]float4* p0, [NoAlias]float4* p1, [NoAlias]float4* p2);
unsafe public delegate void BlastEFDelegate_b32([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]Bool32* p0);
unsafe public delegate Bool32* BlastEFDelegate_B32_b32([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]Bool32* result, [NoAlias]Bool32* p0);
unsafe public delegate Bool32* BlastEFDelegate_B32_b32f4f1([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]Bool32* result, [NoAlias]Bool32* p0, [NoAlias]float4* p1, float p2);
unsafe public delegate void BlastEFDelegate_i1([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, int p0);
unsafe public delegate int BlastEFDelegate_I1_i1([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, int p0);
unsafe public delegate int BlastEFDelegate_I1_i1i1([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, int p0, int p1);
unsafe public delegate int BlastEFDelegate_I1_i1i1i1([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, int p0, int p1, int p2);
unsafe public delegate int BlastEFDelegate_I1_i1f3f3f3([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, int p0, [NoAlias]float3* p1, [NoAlias]float3* p2, [NoAlias]float3* p3);
unsafe public delegate int BlastEFDelegate_I1_i1f3f4f3([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, int p0, [NoAlias]float3* p1, [NoAlias]float4* p2, [NoAlias]float3* p3);
unsafe public delegate Bool32* BlastEFDelegate_B32_i1f3f3f3([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]Bool32* result, int p0, [NoAlias]float3* p1, [NoAlias]float3* p2, [NoAlias]float3* p3);
unsafe public delegate Bool32* BlastEFDelegate_B32_i1f3f4f3([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]IntPtr caller, [NoAlias]Bool32* result, int p0, [NoAlias]float3* p1, [NoAlias]float4* p2, [NoAlias]float3* p3);
unsafe public delegate void BSEFDelegate();
unsafe public delegate float BSEFDelegate_F1();
unsafe public delegate float2* BSEFDelegate_F2([NoAlias]float2* result);
unsafe public delegate float3* BSEFDelegate_F3([NoAlias]float3* result);
unsafe public delegate float4* BSEFDelegate_F4([NoAlias]float4* result);
unsafe public delegate Bool32* BSEFDelegate_B32([NoAlias]Bool32* result);
unsafe public delegate float BSEFDelegate_F1_f1(float p0);
unsafe public delegate float BSEFDelegate_F1_f1f1(float p0, float p1);
unsafe public delegate float BSEFDelegate_F1_f1f1f1(float p0, float p1, float p2);
unsafe public delegate float BSEFDelegate_F1_f1f1f1f1(float p0, float p1, float p2, float p3);
unsafe public delegate float BSEFDelegate_F1_f1f1f1f1f1(float p0, float p1, float p2, float p3, float p4);
unsafe public delegate float BSEFDelegate_F1_f1f1f1f1f1f1(float p0, float p1, float p2, float p3, float p4, float p5);
unsafe public delegate float BSEFDelegate_F1_f1f1f1f1f1f1f1(float p0, float p1, float p2, float p3, float p4, float p5, float p6);
unsafe public delegate float BSEFDelegate_F1_f1f1f1f1f1f1f1f1(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7);
unsafe public delegate float BSEFDelegate_F1_f2([NoAlias]float2* p0);
unsafe public delegate float BSEFDelegate_F1_f2f2([NoAlias]float2* p0, [NoAlias]float2* p1);
unsafe public delegate float BSEFDelegate_F1_f2f2f2([NoAlias]float2* p0, [NoAlias]float2* p1, [NoAlias]float2* p2);
unsafe public delegate float BSEFDelegate_F1_f3([NoAlias]float3* p0);
unsafe public delegate float BSEFDelegate_F1_f3f3([NoAlias]float3* p0, [NoAlias]float3* p1);
unsafe public delegate float BSEFDelegate_F1_f3f3f3([NoAlias]float3* p0, [NoAlias]float3* p1, [NoAlias]float3* p2);
unsafe public delegate float BSEFDelegate_F1_f4([NoAlias]float4* p0);
unsafe public delegate float BSEFDelegate_F1_f4f4([NoAlias]float4* p0, [NoAlias]float4* p1);
unsafe public delegate float BSEFDelegate_F1_f4f4f4([NoAlias]float4* p0, [NoAlias]float4* p1, [NoAlias]float4* p2);
unsafe public delegate float2* BSEFDelegate_F2_f2([NoAlias]float2* result, [NoAlias]float2* p0);
unsafe public delegate float2* BSEFDelegate_F2_f2f2([NoAlias]float2* result, [NoAlias]float2* p0, [NoAlias]float2* p1);
unsafe public delegate float2* BSEFDelegate_F2_f2f2f2([NoAlias]float2* result, [NoAlias]float2* p0, [NoAlias]float2* p1, [NoAlias]float2* p2);
unsafe public delegate float3* BSEFDelegate_F3_f3([NoAlias]float3* result, [NoAlias]float3* p0);
unsafe public delegate float3* BSEFDelegate_F3_f3f3([NoAlias]float3* result, [NoAlias]float3* p0, [NoAlias]float3* p1);
unsafe public delegate float3* BSEFDelegate_F3_f3f3f3([NoAlias]float3* result, [NoAlias]float3* p0, [NoAlias]float3* p1, [NoAlias]float3* p2);
unsafe public delegate float4* BSEFDelegate_F4_f4([NoAlias]float4* result, [NoAlias]float4* p0);
unsafe public delegate float4* BSEFDelegate_F4_f4f4([NoAlias]float4* result, [NoAlias]float4* p0, [NoAlias]float4* p1);
unsafe public delegate float4* BSEFDelegate_F4_f4f4f4([NoAlias]float4* result, [NoAlias]float4* p0, [NoAlias]float4* p1, [NoAlias]float4* p2);
unsafe public delegate void BSEFDelegate_b32([NoAlias]Bool32* p0);
unsafe public delegate Bool32* BSEFDelegate_B32_b32([NoAlias]Bool32* result, [NoAlias]Bool32* p0);
unsafe public delegate Bool32* BSEFDelegate_B32_b32f4f1([NoAlias]Bool32* result, [NoAlias]Bool32* p0, [NoAlias]float4* p1, float p2);
unsafe public delegate void BSEFDelegate_i1(int p0);
unsafe public delegate int BSEFDelegate_I1_i1(int p0);
unsafe public delegate int BSEFDelegate_I1_i1i1(int p0, int p1);
unsafe public delegate int BSEFDelegate_I1_i1i1i1(int p0, int p1, int p2);
unsafe public delegate int BSEFDelegate_I1_i1f3f3f3(int p0, [NoAlias]float3* p1, [NoAlias]float3* p2, [NoAlias]float3* p3);
unsafe public delegate int BSEFDelegate_I1_i1f3f4f3(int p0, [NoAlias]float3* p1, [NoAlias]float4* p2, [NoAlias]float3* p3);
unsafe public delegate Bool32* BSEFDelegate_B32_i1f3f3f3([NoAlias]Bool32* result, int p0, [NoAlias]float3* p1, [NoAlias]float3* p2, [NoAlias]float3* p3);
unsafe public delegate Bool32* BSEFDelegate_B32_i1f3f4f3([NoAlias]Bool32* result, int p0, [NoAlias]float3* p1, [NoAlias]float4* p2, [NoAlias]float3* p3);
unsafe public delegate void* BlastEFSSMDDelegate([NoAlias]IntPtr engine, [NoAlias]IntPtr data);
unsafe public delegate float* BlastEFSSMDDelegate_F1([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float* result, int ssmd_datacount);
unsafe public delegate float2* BlastEFSSMDDelegate_F2([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float2* result, int ssmd_datacount);
unsafe public delegate float3* BlastEFSSMDDelegate_F3([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float3* result, int ssmd_datacount);
unsafe public delegate float4* BlastEFSSMDDelegate_F4([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float4* result, int ssmd_datacount);
unsafe public delegate Bool32* BlastEFSSMDDelegate_B32([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]Bool32* result, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f1([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float* result, [NoAlias]float* p0, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f1f1([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float* result, [NoAlias]float* p0, [NoAlias]float* p1, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f1f1f1([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float* result, [NoAlias]float* p0, [NoAlias]float* p1, [NoAlias]float* p2, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f1f1f1f1([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float* result, [NoAlias]float* p0, [NoAlias]float* p1, [NoAlias]float* p2, [NoAlias]float* p3, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f1f1f1f1f1([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float* result, [NoAlias]float* p0, [NoAlias]float* p1, [NoAlias]float* p2, [NoAlias]float* p3, [NoAlias]float* p4, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f1f1f1f1f1f1([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float* result, [NoAlias]float* p0, [NoAlias]float* p1, [NoAlias]float* p2, [NoAlias]float* p3, [NoAlias]float* p4, [NoAlias]float* p5, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f1f1f1f1f1f1f1([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float* result, [NoAlias]float* p0, [NoAlias]float* p1, [NoAlias]float* p2, [NoAlias]float* p3, [NoAlias]float* p4, [NoAlias]float* p5, [NoAlias]float* p6, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f1f1f1f1f1f1f1f1([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float* result, [NoAlias]float* p0, [NoAlias]float* p1, [NoAlias]float* p2, [NoAlias]float* p3, [NoAlias]float* p4, [NoAlias]float* p5, [NoAlias]float* p6, [NoAlias]float* p7, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f2([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float* result, [NoAlias]float2* p0, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f2f2([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float* result, [NoAlias]float2* p0, [NoAlias]float2* p1, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f2f2f2([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float* result, [NoAlias]float2* p0, [NoAlias]float2* p1, [NoAlias]float2* p2, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f3([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float* result, [NoAlias]float3* p0, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f3f3([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float* result, [NoAlias]float3* p0, [NoAlias]float3* p1, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f3f3f3([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float* result, [NoAlias]float3* p0, [NoAlias]float3* p1, [NoAlias]float3* p2, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f4([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float* result, [NoAlias]float4* p0, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f4f4([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float* result, [NoAlias]float4* p0, [NoAlias]float4* p1, int ssmd_datacount);
unsafe public delegate float* BlastEFSSMDDelegate_F1_f4f4f4([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float* result, [NoAlias]float4* p0, [NoAlias]float4* p1, [NoAlias]float4* p2, int ssmd_datacount);
unsafe public delegate float2* BlastEFSSMDDelegate_F2_f2([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float2* result, [NoAlias]float2* p0, int ssmd_datacount);
unsafe public delegate float2* BlastEFSSMDDelegate_F2_f2f2([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float2* result, [NoAlias]float2* p0, [NoAlias]float2* p1, int ssmd_datacount);
unsafe public delegate float2* BlastEFSSMDDelegate_F2_f2f2f2([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float2* result, [NoAlias]float2* p0, [NoAlias]float2* p1, [NoAlias]float2* p2, int ssmd_datacount);
unsafe public delegate float3* BlastEFSSMDDelegate_F3_f3([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float3* result, [NoAlias]float3* p0, int ssmd_datacount);
unsafe public delegate float3* BlastEFSSMDDelegate_F3_f3f3([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float3* result, [NoAlias]float3* p0, [NoAlias]float3* p1, int ssmd_datacount);
unsafe public delegate float3* BlastEFSSMDDelegate_F3_f3f3f3([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float3* result, [NoAlias]float3* p0, [NoAlias]float3* p1, [NoAlias]float3* p2, int ssmd_datacount);
unsafe public delegate float4* BlastEFSSMDDelegate_F4_f4([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float4* result, [NoAlias]float4* p0, int ssmd_datacount);
unsafe public delegate float4* BlastEFSSMDDelegate_F4_f4f4([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float4* result, [NoAlias]float4* p0, [NoAlias]float4* p1, int ssmd_datacount);
unsafe public delegate float4* BlastEFSSMDDelegate_F4_f4f4f4([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]float4* result, [NoAlias]float4* p0, [NoAlias]float4* p1, [NoAlias]float4* p2, int ssmd_datacount);
unsafe public delegate void* BlastEFSSMDDelegate_b32([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]Bool32* p0, int ssmd_datacount);
unsafe public delegate Bool32* BlastEFSSMDDelegate_B32_b32([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]Bool32* result, [NoAlias]Bool32* p0, int ssmd_datacount);
unsafe public delegate Bool32* BlastEFSSMDDelegate_B32_b32f4f1([NoAlias]IntPtr engine, [NoAlias]IntPtr data, [NoAlias]Bool32* result, [NoAlias]Bool32* p0, [NoAlias]float4* p1, [NoAlias]float* p2, int ssmd_datacount);

    #endregion 

}

namespace NSS.Blast
{
    #region ScriptAPI registrations and function delegate enumeration
    
    public abstract partial class BlastScriptAPI
    {
        public int Register(External.BlastEFDelegate function, string name = null) { return RegisterFunction(function, name, 0, false, (byte)EFDelegateType.CALL_PROC_EF); }
public int Register(External.BlastEFDelegate_F1 function, string name = null) { return RegisterFunction(function, name, 0, false, (byte)EFDelegateType.CALL_PROC_EF_F1); }
public int Register(External.BlastEFDelegate_F2 function, string name = null) { return RegisterFunction(function, name, 0, false, (byte)EFDelegateType.CALL_PROC_EF_F2); }
public int Register(External.BlastEFDelegate_F3 function, string name = null) { return RegisterFunction(function, name, 0, false, (byte)EFDelegateType.CALL_PROC_EF_F3); }
public int Register(External.BlastEFDelegate_F4 function, string name = null) { return RegisterFunction(function, name, 0, false, (byte)EFDelegateType.CALL_PROC_EF_F4); }
public int Register(External.BlastEFDelegate_I1 function, string name = null) { return RegisterFunction(function, name, 0, false, (byte)EFDelegateType.CALL_PROC_EF_I1); }
public int Register(External.BlastEFDelegate_I2 function, string name = null) { return RegisterFunction(function, name, 0, false, (byte)EFDelegateType.CALL_PROC_EF_I2); }
public int Register(External.BlastEFDelegate_I3 function, string name = null) { return RegisterFunction(function, name, 0, false, (byte)EFDelegateType.CALL_PROC_EF_I3); }
public int Register(External.BlastEFDelegate_I4 function, string name = null) { return RegisterFunction(function, name, 0, false, (byte)EFDelegateType.CALL_PROC_EF_I4); }
public int Register(External.BlastEFDelegate_B32 function, string name = null) { return RegisterFunction(function, name, 0, false, (byte)EFDelegateType.CALL_PROC_EF_B32); }
public int Register(External.BlastEFDelegate_F1_f1 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f1); }
public int Register(External.BlastEFDelegate_F1_f1f1 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f1f1); }
public int Register(External.BlastEFDelegate_F1_f1f1f1 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f1f1f1); }
public int Register(External.BlastEFDelegate_F1_f1f1f1f1 function, string name = null) { return RegisterFunction(function, name, 4, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f1f1f1f1); }
public int Register(External.BlastEFDelegate_F1_f1f1f1f1f1 function, string name = null) { return RegisterFunction(function, name, 5, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f1f1f1f1f1); }
public int Register(External.BlastEFDelegate_F1_f1f1f1f1f1f1 function, string name = null) { return RegisterFunction(function, name, 6, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f1f1f1f1f1f1); }
public int Register(External.BlastEFDelegate_F1_f1f1f1f1f1f1f1 function, string name = null) { return RegisterFunction(function, name, 7, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f1f1f1f1f1f1f1); }
public int Register(External.BlastEFDelegate_F1_f1f1f1f1f1f1f1f1 function, string name = null) { return RegisterFunction(function, name, 8, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f1f1f1f1f1f1f1f1); }
public int Register(External.BlastEFDelegate_F1_f2 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f2); }
public int Register(External.BlastEFDelegate_F1_f2f2 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f2f2); }
public int Register(External.BlastEFDelegate_F1_f2f2f2 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f2f2f2); }
public int Register(External.BlastEFDelegate_F1_f3 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f3); }
public int Register(External.BlastEFDelegate_F1_f3f3 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f3f3); }
public int Register(External.BlastEFDelegate_F1_f3f3f3 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f3f3f3); }
public int Register(External.BlastEFDelegate_F1_f4 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f4); }
public int Register(External.BlastEFDelegate_F1_f4f4 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f4f4); }
public int Register(External.BlastEFDelegate_F1_f4f4f4 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_F1_f4f4f4); }
public int Register(External.BlastEFDelegate_F2_f2 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_F2_f2); }
public int Register(External.BlastEFDelegate_F2_f2f2 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_F2_f2f2); }
public int Register(External.BlastEFDelegate_F2_f2f2f2 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_F2_f2f2f2); }
public int Register(External.BlastEFDelegate_F3_f3 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_F3_f3); }
public int Register(External.BlastEFDelegate_F3_f3f3 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_F3_f3f3); }
public int Register(External.BlastEFDelegate_F3_f3f3f3 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_F3_f3f3f3); }
public int Register(External.BlastEFDelegate_F4_f4 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_F4_f4); }
public int Register(External.BlastEFDelegate_F4_f4f4 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_F4_f4f4); }
public int Register(External.BlastEFDelegate_F4_f4f4f4 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_F4_f4f4f4); }
public int Register(External.BlastEFDelegate_b32 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_b32); }
public int Register(External.BlastEFDelegate_B32_b32 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_B32_b32); }
public int Register(External.BlastEFDelegate_B32_b32f4f1 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_B32_b32f4f1); }
public int Register(External.BlastEFDelegate_i1 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_i1); }
public int Register(External.BlastEFDelegate_I1_i1 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_I1_i1); }
public int Register(External.BlastEFDelegate_I1_i1i1 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_I1_i1i1); }
public int Register(External.BlastEFDelegate_I1_i1i1i1 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_I1_i1i1i1); }
public int Register(External.BlastEFDelegate_I1_i1f3f3f3 function, string name = null) { return RegisterFunction(function, name, 4, false, (byte)EFDelegateType.CALL_PROC_EF_I1_i1f3f3f3); }
public int Register(External.BlastEFDelegate_I1_i1f3f4f3 function, string name = null) { return RegisterFunction(function, name, 4, false, (byte)EFDelegateType.CALL_PROC_EF_I1_i1f3f4f3); }
public int Register(External.BlastEFDelegate_B32_i1f3f3f3 function, string name = null) { return RegisterFunction(function, name, 4, false, (byte)EFDelegateType.CALL_PROC_EF_B32_i1f3f3f3); }
public int Register(External.BlastEFDelegate_B32_i1f3f4f3 function, string name = null) { return RegisterFunction(function, name, 4, false, (byte)EFDelegateType.CALL_PROC_EF_B32_i1f3f4f3); }
public int Register(External.BSEFDelegate function, string name = null) { return RegisterFunction(function, name, 0, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT); }
public int Register(External.BSEFDelegate_F1 function, string name = null) { return RegisterFunction(function, name, 0, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1); }
public int Register(External.BSEFDelegate_F2 function, string name = null) { return RegisterFunction(function, name, 0, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F2); }
public int Register(External.BSEFDelegate_F3 function, string name = null) { return RegisterFunction(function, name, 0, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F3); }
public int Register(External.BSEFDelegate_F4 function, string name = null) { return RegisterFunction(function, name, 0, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F4); }
public int Register(External.BSEFDelegate_B32 function, string name = null) { return RegisterFunction(function, name, 0, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_B32); }
public int Register(External.BSEFDelegate_F1_f1 function, string name = null) { return RegisterFunction(function, name, 1, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f1); }
public int Register(External.BSEFDelegate_F1_f1f1 function, string name = null) { return RegisterFunction(function, name, 2, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f1f1); }
public int Register(External.BSEFDelegate_F1_f1f1f1 function, string name = null) { return RegisterFunction(function, name, 3, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f1f1f1); }
public int Register(External.BSEFDelegate_F1_f1f1f1f1 function, string name = null) { return RegisterFunction(function, name, 4, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f1f1f1f1); }
public int Register(External.BSEFDelegate_F1_f1f1f1f1f1 function, string name = null) { return RegisterFunction(function, name, 5, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f1f1f1f1f1); }
public int Register(External.BSEFDelegate_F1_f1f1f1f1f1f1 function, string name = null) { return RegisterFunction(function, name, 6, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f1f1f1f1f1f1); }
public int Register(External.BSEFDelegate_F1_f1f1f1f1f1f1f1 function, string name = null) { return RegisterFunction(function, name, 7, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f1f1f1f1f1f1f1); }
public int Register(External.BSEFDelegate_F1_f1f1f1f1f1f1f1f1 function, string name = null) { return RegisterFunction(function, name, 8, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f1f1f1f1f1f1f1f1); }
public int Register(External.BSEFDelegate_F1_f2 function, string name = null) { return RegisterFunction(function, name, 1, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f2); }
public int Register(External.BSEFDelegate_F1_f2f2 function, string name = null) { return RegisterFunction(function, name, 2, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f2f2); }
public int Register(External.BSEFDelegate_F1_f2f2f2 function, string name = null) { return RegisterFunction(function, name, 3, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f2f2f2); }
public int Register(External.BSEFDelegate_F1_f3 function, string name = null) { return RegisterFunction(function, name, 1, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f3); }
public int Register(External.BSEFDelegate_F1_f3f3 function, string name = null) { return RegisterFunction(function, name, 2, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f3f3); }
public int Register(External.BSEFDelegate_F1_f3f3f3 function, string name = null) { return RegisterFunction(function, name, 3, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f3f3f3); }
public int Register(External.BSEFDelegate_F1_f4 function, string name = null) { return RegisterFunction(function, name, 1, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f4); }
public int Register(External.BSEFDelegate_F1_f4f4 function, string name = null) { return RegisterFunction(function, name, 2, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f4f4); }
public int Register(External.BSEFDelegate_F1_f4f4f4 function, string name = null) { return RegisterFunction(function, name, 3, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F1_f4f4f4); }
public int Register(External.BSEFDelegate_F2_f2 function, string name = null) { return RegisterFunction(function, name, 1, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F2_f2); }
public int Register(External.BSEFDelegate_F2_f2f2 function, string name = null) { return RegisterFunction(function, name, 2, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F2_f2f2); }
public int Register(External.BSEFDelegate_F2_f2f2f2 function, string name = null) { return RegisterFunction(function, name, 3, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F2_f2f2f2); }
public int Register(External.BSEFDelegate_F3_f3 function, string name = null) { return RegisterFunction(function, name, 1, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F3_f3); }
public int Register(External.BSEFDelegate_F3_f3f3 function, string name = null) { return RegisterFunction(function, name, 2, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F3_f3f3); }
public int Register(External.BSEFDelegate_F3_f3f3f3 function, string name = null) { return RegisterFunction(function, name, 3, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F3_f3f3f3); }
public int Register(External.BSEFDelegate_F4_f4 function, string name = null) { return RegisterFunction(function, name, 1, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F4_f4); }
public int Register(External.BSEFDelegate_F4_f4f4 function, string name = null) { return RegisterFunction(function, name, 2, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F4_f4f4); }
public int Register(External.BSEFDelegate_F4_f4f4f4 function, string name = null) { return RegisterFunction(function, name, 3, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_F4_f4f4f4); }
public int Register(External.BSEFDelegate_b32 function, string name = null) { return RegisterFunction(function, name, 1, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_b32); }
public int Register(External.BSEFDelegate_B32_b32 function, string name = null) { return RegisterFunction(function, name, 1, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_B32_b32); }
public int Register(External.BSEFDelegate_B32_b32f4f1 function, string name = null) { return RegisterFunction(function, name, 3, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_B32_b32f4f1); }
public int Register(External.BSEFDelegate_i1 function, string name = null) { return RegisterFunction(function, name, 1, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_i1); }
public int Register(External.BSEFDelegate_I1_i1 function, string name = null) { return RegisterFunction(function, name, 1, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_I1_i1); }
public int Register(External.BSEFDelegate_I1_i1i1 function, string name = null) { return RegisterFunction(function, name, 2, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_I1_i1i1); }
public int Register(External.BSEFDelegate_I1_i1i1i1 function, string name = null) { return RegisterFunction(function, name, 3, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_I1_i1i1i1); }
public int Register(External.BSEFDelegate_I1_i1f3f3f3 function, string name = null) { return RegisterFunction(function, name, 4, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_I1_i1f3f3f3); }
public int Register(External.BSEFDelegate_I1_i1f3f4f3 function, string name = null) { return RegisterFunction(function, name, 4, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_I1_i1f3f4f3); }
public int Register(External.BSEFDelegate_B32_i1f3f3f3 function, string name = null) { return RegisterFunction(function, name, 4, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_B32_i1f3f3f3); }
public int Register(External.BSEFDelegate_B32_i1f3f4f3 function, string name = null) { return RegisterFunction(function, name, 4, true, (byte)EFDelegateType.CALL_PROC_EF_SHORT_B32_i1f3f4f3); }
public int Register(External.BlastEFSSMDDelegate function, string name = null) { return RegisterFunction(function, name, 0, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD); }
public int Register(External.BlastEFSSMDDelegate_F1 function, string name = null) { return RegisterFunction(function, name, 0, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1); }
public int Register(External.BlastEFSSMDDelegate_F2 function, string name = null) { return RegisterFunction(function, name, 0, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F2); }
public int Register(External.BlastEFSSMDDelegate_F3 function, string name = null) { return RegisterFunction(function, name, 0, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F3); }
public int Register(External.BlastEFSSMDDelegate_F4 function, string name = null) { return RegisterFunction(function, name, 0, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F4); }
public int Register(External.BlastEFSSMDDelegate_B32 function, string name = null) { return RegisterFunction(function, name, 0, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_B32); }
public int Register(External.BlastEFSSMDDelegate_F1_f1 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f1); }
public int Register(External.BlastEFSSMDDelegate_F1_f1f1 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f1f1); }
public int Register(External.BlastEFSSMDDelegate_F1_f1f1f1 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f1f1f1); }
public int Register(External.BlastEFSSMDDelegate_F1_f1f1f1f1 function, string name = null) { return RegisterFunction(function, name, 4, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f1f1f1f1); }
public int Register(External.BlastEFSSMDDelegate_F1_f1f1f1f1f1 function, string name = null) { return RegisterFunction(function, name, 5, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f1f1f1f1f1); }
public int Register(External.BlastEFSSMDDelegate_F1_f1f1f1f1f1f1 function, string name = null) { return RegisterFunction(function, name, 6, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f1f1f1f1f1f1); }
public int Register(External.BlastEFSSMDDelegate_F1_f1f1f1f1f1f1f1 function, string name = null) { return RegisterFunction(function, name, 7, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f1f1f1f1f1f1f1); }
public int Register(External.BlastEFSSMDDelegate_F1_f1f1f1f1f1f1f1f1 function, string name = null) { return RegisterFunction(function, name, 8, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f1f1f1f1f1f1f1f1); }
public int Register(External.BlastEFSSMDDelegate_F1_f2 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f2); }
public int Register(External.BlastEFSSMDDelegate_F1_f2f2 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f2f2); }
public int Register(External.BlastEFSSMDDelegate_F1_f2f2f2 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f2f2f2); }
public int Register(External.BlastEFSSMDDelegate_F1_f3 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f3); }
public int Register(External.BlastEFSSMDDelegate_F1_f3f3 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f3f3); }
public int Register(External.BlastEFSSMDDelegate_F1_f3f3f3 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f3f3f3); }
public int Register(External.BlastEFSSMDDelegate_F1_f4 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f4); }
public int Register(External.BlastEFSSMDDelegate_F1_f4f4 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f4f4); }
public int Register(External.BlastEFSSMDDelegate_F1_f4f4f4 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F1_f4f4f4); }
public int Register(External.BlastEFSSMDDelegate_F2_f2 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F2_f2); }
public int Register(External.BlastEFSSMDDelegate_F2_f2f2 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F2_f2f2); }
public int Register(External.BlastEFSSMDDelegate_F2_f2f2f2 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F2_f2f2f2); }
public int Register(External.BlastEFSSMDDelegate_F3_f3 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F3_f3); }
public int Register(External.BlastEFSSMDDelegate_F3_f3f3 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F3_f3f3); }
public int Register(External.BlastEFSSMDDelegate_F3_f3f3f3 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F3_f3f3f3); }
public int Register(External.BlastEFSSMDDelegate_F4_f4 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F4_f4); }
public int Register(External.BlastEFSSMDDelegate_F4_f4f4 function, string name = null) { return RegisterFunction(function, name, 2, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F4_f4f4); }
public int Register(External.BlastEFSSMDDelegate_F4_f4f4f4 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_F4_f4f4f4); }
public int Register(External.BlastEFSSMDDelegate_b32 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_b32); }
public int Register(External.BlastEFSSMDDelegate_B32_b32 function, string name = null) { return RegisterFunction(function, name, 1, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_B32_b32); }
public int Register(External.BlastEFSSMDDelegate_B32_b32f4f1 function, string name = null) { return RegisterFunction(function, name, 3, false, (byte)EFDelegateType.CALL_PROC_EF_SSMD_B32_b32f4f1); }

    }

    public enum EFDelegateType : byte
    {
        CALL_PROC_EF = 0,
CALL_PROC_EF_F1 = 1,
CALL_PROC_EF_F2 = 2,
CALL_PROC_EF_F3 = 3,
CALL_PROC_EF_F4 = 4,
CALL_PROC_EF_I1 = 5,
CALL_PROC_EF_I2 = 6,
CALL_PROC_EF_I3 = 7,
CALL_PROC_EF_I4 = 8,
CALL_PROC_EF_B32 = 9,
CALL_PROC_EF_F1_f1 = 10,
CALL_PROC_EF_F1_f1f1 = 11,
CALL_PROC_EF_F1_f1f1f1 = 12,
CALL_PROC_EF_F1_f1f1f1f1 = 13,
CALL_PROC_EF_F1_f1f1f1f1f1 = 14,
CALL_PROC_EF_F1_f1f1f1f1f1f1 = 15,
CALL_PROC_EF_F1_f1f1f1f1f1f1f1 = 16,
CALL_PROC_EF_F1_f1f1f1f1f1f1f1f1 = 17,
CALL_PROC_EF_F1_f2 = 18,
CALL_PROC_EF_F1_f2f2 = 19,
CALL_PROC_EF_F1_f2f2f2 = 20,
CALL_PROC_EF_F1_f3 = 21,
CALL_PROC_EF_F1_f3f3 = 22,
CALL_PROC_EF_F1_f3f3f3 = 23,
CALL_PROC_EF_F1_f4 = 24,
CALL_PROC_EF_F1_f4f4 = 25,
CALL_PROC_EF_F1_f4f4f4 = 26,
CALL_PROC_EF_F2_f2 = 27,
CALL_PROC_EF_F2_f2f2 = 28,
CALL_PROC_EF_F2_f2f2f2 = 29,
CALL_PROC_EF_F3_f3 = 30,
CALL_PROC_EF_F3_f3f3 = 31,
CALL_PROC_EF_F3_f3f3f3 = 32,
CALL_PROC_EF_F4_f4 = 33,
CALL_PROC_EF_F4_f4f4 = 34,
CALL_PROC_EF_F4_f4f4f4 = 35,
CALL_PROC_EF_b32 = 36,
CALL_PROC_EF_B32_b32 = 37,
CALL_PROC_EF_B32_b32f4f1 = 38,
CALL_PROC_EF_i1 = 39,
CALL_PROC_EF_I1_i1 = 40,
CALL_PROC_EF_I1_i1i1 = 41,
CALL_PROC_EF_I1_i1i1i1 = 42,
CALL_PROC_EF_I1_i1f3f3f3 = 43,
CALL_PROC_EF_I1_i1f3f4f3 = 44,
CALL_PROC_EF_B32_i1f3f3f3 = 45,
CALL_PROC_EF_B32_i1f3f4f3 = 46,
CALL_PROC_EF_SHORT = 47,
CALL_PROC_EF_SHORT_F1 = 48,
CALL_PROC_EF_SHORT_F2 = 49,
CALL_PROC_EF_SHORT_F3 = 50,
CALL_PROC_EF_SHORT_F4 = 51,
CALL_PROC_EF_SHORT_B32 = 52,
CALL_PROC_EF_SHORT_F1_f1 = 53,
CALL_PROC_EF_SHORT_F1_f1f1 = 54,
CALL_PROC_EF_SHORT_F1_f1f1f1 = 55,
CALL_PROC_EF_SHORT_F1_f1f1f1f1 = 56,
CALL_PROC_EF_SHORT_F1_f1f1f1f1f1 = 57,
CALL_PROC_EF_SHORT_F1_f1f1f1f1f1f1 = 58,
CALL_PROC_EF_SHORT_F1_f1f1f1f1f1f1f1 = 59,
CALL_PROC_EF_SHORT_F1_f1f1f1f1f1f1f1f1 = 60,
CALL_PROC_EF_SHORT_F1_f2 = 61,
CALL_PROC_EF_SHORT_F1_f2f2 = 62,
CALL_PROC_EF_SHORT_F1_f2f2f2 = 63,
CALL_PROC_EF_SHORT_F1_f3 = 64,
CALL_PROC_EF_SHORT_F1_f3f3 = 65,
CALL_PROC_EF_SHORT_F1_f3f3f3 = 66,
CALL_PROC_EF_SHORT_F1_f4 = 67,
CALL_PROC_EF_SHORT_F1_f4f4 = 68,
CALL_PROC_EF_SHORT_F1_f4f4f4 = 69,
CALL_PROC_EF_SHORT_F2_f2 = 70,
CALL_PROC_EF_SHORT_F2_f2f2 = 71,
CALL_PROC_EF_SHORT_F2_f2f2f2 = 72,
CALL_PROC_EF_SHORT_F3_f3 = 73,
CALL_PROC_EF_SHORT_F3_f3f3 = 74,
CALL_PROC_EF_SHORT_F3_f3f3f3 = 75,
CALL_PROC_EF_SHORT_F4_f4 = 76,
CALL_PROC_EF_SHORT_F4_f4f4 = 77,
CALL_PROC_EF_SHORT_F4_f4f4f4 = 78,
CALL_PROC_EF_SHORT_b32 = 79,
CALL_PROC_EF_SHORT_B32_b32 = 80,
CALL_PROC_EF_SHORT_B32_b32f4f1 = 81,
CALL_PROC_EF_SHORT_i1 = 82,
CALL_PROC_EF_SHORT_I1_i1 = 83,
CALL_PROC_EF_SHORT_I1_i1i1 = 84,
CALL_PROC_EF_SHORT_I1_i1i1i1 = 85,
CALL_PROC_EF_SHORT_I1_i1f3f3f3 = 86,
CALL_PROC_EF_SHORT_I1_i1f3f4f3 = 87,
CALL_PROC_EF_SHORT_B32_i1f3f3f3 = 88,
CALL_PROC_EF_SHORT_B32_i1f3f4f3 = 89,
CALL_PROC_EF_SSMD = 90,
CALL_PROC_EF_SSMD_F1 = 91,
CALL_PROC_EF_SSMD_F2 = 92,
CALL_PROC_EF_SSMD_F3 = 93,
CALL_PROC_EF_SSMD_F4 = 94,
CALL_PROC_EF_SSMD_B32 = 95,
CALL_PROC_EF_SSMD_F1_f1 = 96,
CALL_PROC_EF_SSMD_F1_f1f1 = 97,
CALL_PROC_EF_SSMD_F1_f1f1f1 = 98,
CALL_PROC_EF_SSMD_F1_f1f1f1f1 = 99,
CALL_PROC_EF_SSMD_F1_f1f1f1f1f1 = 100,
CALL_PROC_EF_SSMD_F1_f1f1f1f1f1f1 = 101,
CALL_PROC_EF_SSMD_F1_f1f1f1f1f1f1f1 = 102,
CALL_PROC_EF_SSMD_F1_f1f1f1f1f1f1f1f1 = 103,
CALL_PROC_EF_SSMD_F1_f2 = 104,
CALL_PROC_EF_SSMD_F1_f2f2 = 105,
CALL_PROC_EF_SSMD_F1_f2f2f2 = 106,
CALL_PROC_EF_SSMD_F1_f3 = 107,
CALL_PROC_EF_SSMD_F1_f3f3 = 108,
CALL_PROC_EF_SSMD_F1_f3f3f3 = 109,
CALL_PROC_EF_SSMD_F1_f4 = 110,
CALL_PROC_EF_SSMD_F1_f4f4 = 111,
CALL_PROC_EF_SSMD_F1_f4f4f4 = 112,
CALL_PROC_EF_SSMD_F2_f2 = 113,
CALL_PROC_EF_SSMD_F2_f2f2 = 114,
CALL_PROC_EF_SSMD_F2_f2f2f2 = 115,
CALL_PROC_EF_SSMD_F3_f3 = 116,
CALL_PROC_EF_SSMD_F3_f3f3 = 117,
CALL_PROC_EF_SSMD_F3_f3f3f3 = 118,
CALL_PROC_EF_SSMD_F4_f4 = 119,
CALL_PROC_EF_SSMD_F4_f4f4 = 120,
CALL_PROC_EF_SSMD_F4_f4f4f4 = 121,
CALL_PROC_EF_SSMD_b32 = 122,
CALL_PROC_EF_SSMD_B32_b32 = 123,
CALL_PROC_EF_SSMD_B32_b32f4f1 = 124,

    }

    #endregion 
}

namespace NSS.Blast.Interpretor
{
    #region External Function Calls 

    unsafe public partial struct BlastInterpretor
    {
        internal float4 CALL_EF(ref int code_pointer, in BlastScriptFunction function)
{
    int id = function.FunctionId;
    byte delegate_type = function.FunctionDelegateId;

    float4 f4;
    void* temp = &f4; 

    switch(delegate_type)
    {
        case 0: CALL_PROC_EF(ref code_pointer, id); return 0;
        case 1: return CALL_PROC_EF_F1(ref code_pointer, id); 
        case 2: return new float4(CALL_PROC_EF_F2(ref code_pointer, id, (float2*)temp)[0], 0, 0);
        case 3: return new float4(CALL_PROC_EF_F3(ref code_pointer, id, (float3*)temp)[0], 0); 
        case 4: return CALL_PROC_EF_F4(ref code_pointer, id, (float4*)temp)[0]; 
        case 5: return CALL_PROC_EF_I1(ref code_pointer, id); 
        case 6: return new float4(CALL_PROC_EF_I2(ref code_pointer, id, (int2*)temp)[0], 0, 0);
        case 7: return new float4(CALL_PROC_EF_I3(ref code_pointer, id, (int3*)temp)[0], 0); 
        case 8: return CALL_PROC_EF_I4(ref code_pointer, id, (int4*)temp)[0]; 
        case 9: return new float4(CALL_PROC_EF_B32(ref code_pointer, id, (Bool32*)temp)[0].Single, 0, 0, 0);
        case 10: return CALL_PROC_EF_F1_f1(ref code_pointer, id); 
        case 11: return CALL_PROC_EF_F1_f1f1(ref code_pointer, id); 
        case 12: return CALL_PROC_EF_F1_f1f1f1(ref code_pointer, id); 
        case 13: return CALL_PROC_EF_F1_f1f1f1f1(ref code_pointer, id); 
        case 14: return CALL_PROC_EF_F1_f1f1f1f1f1(ref code_pointer, id); 
        case 15: return CALL_PROC_EF_F1_f1f1f1f1f1f1(ref code_pointer, id); 
        case 16: return CALL_PROC_EF_F1_f1f1f1f1f1f1f1(ref code_pointer, id); 
        case 17: return CALL_PROC_EF_F1_f1f1f1f1f1f1f1f1(ref code_pointer, id); 
        case 18: return CALL_PROC_EF_F1_f2(ref code_pointer, id); 
        case 19: return CALL_PROC_EF_F1_f2f2(ref code_pointer, id); 
        case 20: return CALL_PROC_EF_F1_f2f2f2(ref code_pointer, id); 
        case 21: return CALL_PROC_EF_F1_f3(ref code_pointer, id); 
        case 22: return CALL_PROC_EF_F1_f3f3(ref code_pointer, id); 
        case 23: return CALL_PROC_EF_F1_f3f3f3(ref code_pointer, id); 
        case 24: return CALL_PROC_EF_F1_f4(ref code_pointer, id); 
        case 25: return CALL_PROC_EF_F1_f4f4(ref code_pointer, id); 
        case 26: return CALL_PROC_EF_F1_f4f4f4(ref code_pointer, id); 
        case 27: return new float4(CALL_PROC_EF_F2_f2(ref code_pointer, id, (float2*)temp)[0], 0, 0);
        case 28: return new float4(CALL_PROC_EF_F2_f2f2(ref code_pointer, id, (float2*)temp)[0], 0, 0);
        case 29: return new float4(CALL_PROC_EF_F2_f2f2f2(ref code_pointer, id, (float2*)temp)[0], 0, 0);
        case 30: return new float4(CALL_PROC_EF_F3_f3(ref code_pointer, id, (float3*)temp)[0], 0); 
        case 31: return new float4(CALL_PROC_EF_F3_f3f3(ref code_pointer, id, (float3*)temp)[0], 0); 
        case 32: return new float4(CALL_PROC_EF_F3_f3f3f3(ref code_pointer, id, (float3*)temp)[0], 0); 
        case 33: return CALL_PROC_EF_F4_f4(ref code_pointer, id, (float4*)temp)[0]; 
        case 34: return CALL_PROC_EF_F4_f4f4(ref code_pointer, id, (float4*)temp)[0]; 
        case 35: return CALL_PROC_EF_F4_f4f4f4(ref code_pointer, id, (float4*)temp)[0]; 
        case 36: CALL_PROC_EF_b32(ref code_pointer, id); return 0;
        case 37: return new float4(CALL_PROC_EF_B32_b32(ref code_pointer, id, (Bool32*)temp)[0].Single, 0, 0, 0);
        case 38: return new float4(CALL_PROC_EF_B32_b32f4f1(ref code_pointer, id, (Bool32*)temp)[0].Single, 0, 0, 0);
        case 39: CALL_PROC_EF_i1(ref code_pointer, id); return 0;
        case 40: return CALL_PROC_EF_I1_i1(ref code_pointer, id); 
        case 41: return CALL_PROC_EF_I1_i1i1(ref code_pointer, id); 
        case 42: return CALL_PROC_EF_I1_i1i1i1(ref code_pointer, id); 
        case 43: return CALL_PROC_EF_I1_i1f3f3f3(ref code_pointer, id); 
        case 44: return CALL_PROC_EF_I1_i1f3f4f3(ref code_pointer, id); 
        case 45: return new float4(CALL_PROC_EF_B32_i1f3f3f3(ref code_pointer, id, (Bool32*)temp)[0].Single, 0, 0, 0);
        case 46: return new float4(CALL_PROC_EF_B32_i1f3f4f3(ref code_pointer, id, (Bool32*)temp)[0].Single, 0, 0, 0);
        case 47: CALL_PROC_EF_SHORT(ref code_pointer, id); return 0;
        case 48: return CALL_PROC_EF_SHORT_F1(ref code_pointer, id); 
        case 49: return new float4(CALL_PROC_EF_SHORT_F2(ref code_pointer, id, (float2*)temp)[0], 0, 0);
        case 50: return new float4(CALL_PROC_EF_SHORT_F3(ref code_pointer, id, (float3*)temp)[0], 0); 
        case 51: return CALL_PROC_EF_SHORT_F4(ref code_pointer, id, (float4*)temp)[0]; 
        case 52: return new float4(CALL_PROC_EF_SHORT_B32(ref code_pointer, id, (Bool32*)temp)[0].Single, 0, 0, 0);
        case 53: return CALL_PROC_EF_SHORT_F1_f1(ref code_pointer, id); 
        case 54: return CALL_PROC_EF_SHORT_F1_f1f1(ref code_pointer, id); 
        case 55: return CALL_PROC_EF_SHORT_F1_f1f1f1(ref code_pointer, id); 
        case 56: return CALL_PROC_EF_SHORT_F1_f1f1f1f1(ref code_pointer, id); 
        case 57: return CALL_PROC_EF_SHORT_F1_f1f1f1f1f1(ref code_pointer, id); 
        case 58: return CALL_PROC_EF_SHORT_F1_f1f1f1f1f1f1(ref code_pointer, id); 
        case 59: return CALL_PROC_EF_SHORT_F1_f1f1f1f1f1f1f1(ref code_pointer, id); 
        case 60: return CALL_PROC_EF_SHORT_F1_f1f1f1f1f1f1f1f1(ref code_pointer, id); 
        case 61: return CALL_PROC_EF_SHORT_F1_f2(ref code_pointer, id); 
        case 62: return CALL_PROC_EF_SHORT_F1_f2f2(ref code_pointer, id); 
        case 63: return CALL_PROC_EF_SHORT_F1_f2f2f2(ref code_pointer, id); 
        case 64: return CALL_PROC_EF_SHORT_F1_f3(ref code_pointer, id); 
        case 65: return CALL_PROC_EF_SHORT_F1_f3f3(ref code_pointer, id); 
        case 66: return CALL_PROC_EF_SHORT_F1_f3f3f3(ref code_pointer, id); 
        case 67: return CALL_PROC_EF_SHORT_F1_f4(ref code_pointer, id); 
        case 68: return CALL_PROC_EF_SHORT_F1_f4f4(ref code_pointer, id); 
        case 69: return CALL_PROC_EF_SHORT_F1_f4f4f4(ref code_pointer, id); 
        case 70: return new float4(CALL_PROC_EF_SHORT_F2_f2(ref code_pointer, id, (float2*)temp)[0], 0, 0);
        case 71: return new float4(CALL_PROC_EF_SHORT_F2_f2f2(ref code_pointer, id, (float2*)temp)[0], 0, 0);
        case 72: return new float4(CALL_PROC_EF_SHORT_F2_f2f2f2(ref code_pointer, id, (float2*)temp)[0], 0, 0);
        case 73: return new float4(CALL_PROC_EF_SHORT_F3_f3(ref code_pointer, id, (float3*)temp)[0], 0); 
        case 74: return new float4(CALL_PROC_EF_SHORT_F3_f3f3(ref code_pointer, id, (float3*)temp)[0], 0); 
        case 75: return new float4(CALL_PROC_EF_SHORT_F3_f3f3f3(ref code_pointer, id, (float3*)temp)[0], 0); 
        case 76: return CALL_PROC_EF_SHORT_F4_f4(ref code_pointer, id, (float4*)temp)[0]; 
        case 77: return CALL_PROC_EF_SHORT_F4_f4f4(ref code_pointer, id, (float4*)temp)[0]; 
        case 78: return CALL_PROC_EF_SHORT_F4_f4f4f4(ref code_pointer, id, (float4*)temp)[0]; 
        case 79: CALL_PROC_EF_SHORT_b32(ref code_pointer, id); return 0;
        case 80: return new float4(CALL_PROC_EF_SHORT_B32_b32(ref code_pointer, id, (Bool32*)temp)[0].Single, 0, 0, 0);
        case 81: return new float4(CALL_PROC_EF_SHORT_B32_b32f4f1(ref code_pointer, id, (Bool32*)temp)[0].Single, 0, 0, 0);
        case 82: CALL_PROC_EF_SHORT_i1(ref code_pointer, id); return 0;
        case 83: return CALL_PROC_EF_SHORT_I1_i1(ref code_pointer, id); 
        case 84: return CALL_PROC_EF_SHORT_I1_i1i1(ref code_pointer, id); 
        case 85: return CALL_PROC_EF_SHORT_I1_i1i1i1(ref code_pointer, id); 
        case 86: return CALL_PROC_EF_SHORT_I1_i1f3f3f3(ref code_pointer, id); 
        case 87: return CALL_PROC_EF_SHORT_I1_i1f3f4f3(ref code_pointer, id); 
        case 88: return new float4(CALL_PROC_EF_SHORT_B32_i1f3f3f3(ref code_pointer, id, (Bool32*)temp)[0].Single, 0, 0, 0);
        case 89: return new float4(CALL_PROC_EF_SHORT_B32_i1f3f4f3(ref code_pointer, id, (Bool32*)temp)[0].Single, 0, 0, 0);
    }

    return float.NaN;
}


        [MethodImpl(MethodImplOptions.AggressiveInlining)]
internal void CALL_PROC_EF(ref int code_pointer, in int function_id)
{
#if STANDALONE_VSBUILD
  (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr);
   return;
#else
   FunctionPointer<External.BlastEFDelegate> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr);
       return;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate: error calling external function with id {function_id}");
#endif
   return;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_F1(ref int code_pointer, in int function_id)
{
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float2* CALL_PROC_EF_F2(ref int code_pointer, in int function_id, float2* result)
{
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F2).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F2> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F2: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float3* CALL_PROC_EF_F3(ref int code_pointer, in int function_id, float3* result)
{
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F3).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F3: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float4* CALL_PROC_EF_F4(ref int code_pointer, in int function_id, float4* result)
{
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F4).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F4> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F4: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal int CALL_PROC_EF_I1(ref int code_pointer, in int function_id)
{
   int result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_I1).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_I1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_I1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_I1: error calling external function with id {function_id}");
#endif
   return 0;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal int2* CALL_PROC_EF_I2(ref int code_pointer, in int function_id, int2* result)
{
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_I2).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_I2> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_I2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_I2: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal int3* CALL_PROC_EF_I3(ref int code_pointer, in int function_id, int3* result)
{
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_I3).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_I3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_I3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_I3: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal int4* CALL_PROC_EF_I4(ref int code_pointer, in int function_id, int4* result)
{
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_I4).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_I4> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_I4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_I4: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal Bool32* CALL_PROC_EF_B32(ref int code_pointer, in int function_id, Bool32* result)
{
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_B32).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_B32> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_B32>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_B32: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_F1_f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f1).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_F1_f1f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p2 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f1f1).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f1f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_F1_f1f1f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p2 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p3 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f1f1f1).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2, p3);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f1f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f1f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2, p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f1f1f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_F1_f1f1f1f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p2 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p3 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p4 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f1f1f1f1).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2, p3, p4);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f1f1f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f1f1f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2, p3, p4);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f1f1f1f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_F1_f1f1f1f1f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p2 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p3 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p4 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p5 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f1f1f1f1f1).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2, p3, p4, p5);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f1f1f1f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f1f1f1f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2, p3, p4, p5);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f1f1f1f1f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_F1_f1f1f1f1f1f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p2 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p3 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p4 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p5 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p6 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f1f1f1f1f1f1).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2, p3, p4, p5, p6);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f1f1f1f1f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f1f1f1f1f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2, p3, p4, p5, p6);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f1f1f1f1f1f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_F1_f1f1f1f1f1f1f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p2 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p3 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p4 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p5 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p6 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p7 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f1f1f1f1f1f1f1).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2, p3, p4, p5, p6, p7);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f1f1f1f1f1f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f1f1f1f1f1f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2, p3, p4, p5, p6, p7);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f1f1f1f1f1f1f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_F1_f1f1f1f1f1f1f1f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p2 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p3 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p4 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p5 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p6 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p7 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p8 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f1f1f1f1f1f1f1f1).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2, p3, p4, p5, p6, p7, p8);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f1f1f1f1f1f1f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f1f1f1f1f1f1f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2, p3, p4, p5, p6, p7, p8);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f1f1f1f1f1f1f1f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_F1_f2(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p1 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f2).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, &p1);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f2> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, &p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f2: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_F1_f2f2(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p1 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p2 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f2f2).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, &p1, &p2);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f2f2> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f2f2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, &p1, &p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f2f2: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_F1_f2f2f2(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p1 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p2 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p3 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f2f2f2).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, &p1, &p2, &p3);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f2f2f2> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f2f2f2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, &p1, &p2, &p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f2f2f2: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_F1_f3(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p1 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f3).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, &p1);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, &p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f3: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_F1_f3f3(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p1 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p2 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f3f3).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, &p1, &p2);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f3f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f3f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, &p1, &p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f3f3: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_F1_f3f3f3(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p1 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p2 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p3 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f3f3f3).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, &p1, &p2, &p3);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f3f3f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f3f3f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, &p1, &p2, &p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f3f3f3: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_F1_f4(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p1 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f4).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, &p1);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f4> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, &p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f4: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_F1_f4f4(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p1 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p2 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f4f4).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, &p1, &p2);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f4f4> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f4f4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, &p1, &p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f4f4: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_F1_f4f4f4(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p1 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p2 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p3 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F1_f4f4f4).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, &p1, &p2, &p3);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F1_f4f4f4> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F1_f4f4f4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, &p1, &p2, &p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F1_f4f4f4: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float2* CALL_PROC_EF_F2_f2(ref int code_pointer, in int function_id, float2* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p1 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F2_f2).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, &p1);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F2_f2> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F2_f2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, &p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F2_f2: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float2* CALL_PROC_EF_F2_f2f2(ref int code_pointer, in int function_id, float2* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p1 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p2 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F2_f2f2).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, &p1, &p2);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F2_f2f2> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F2_f2f2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, &p1, &p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F2_f2f2: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float2* CALL_PROC_EF_F2_f2f2f2(ref int code_pointer, in int function_id, float2* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p1 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p2 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p3 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F2_f2f2f2).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, &p1, &p2, &p3);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F2_f2f2f2> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F2_f2f2f2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, &p1, &p2, &p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F2_f2f2f2: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float3* CALL_PROC_EF_F3_f3(ref int code_pointer, in int function_id, float3* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p1 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F3_f3).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, &p1);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F3_f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F3_f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, &p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F3_f3: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float3* CALL_PROC_EF_F3_f3f3(ref int code_pointer, in int function_id, float3* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p1 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p2 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F3_f3f3).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, &p1, &p2);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F3_f3f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F3_f3f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, &p1, &p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F3_f3f3: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float3* CALL_PROC_EF_F3_f3f3f3(ref int code_pointer, in int function_id, float3* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p1 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p2 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p3 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F3_f3f3f3).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, &p1, &p2, &p3);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F3_f3f3f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F3_f3f3f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, &p1, &p2, &p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F3_f3f3f3: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float4* CALL_PROC_EF_F4_f4(ref int code_pointer, in int function_id, float4* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p1 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F4_f4).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, &p1);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F4_f4> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F4_f4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, &p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F4_f4: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float4* CALL_PROC_EF_F4_f4f4(ref int code_pointer, in int function_id, float4* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p1 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p2 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F4_f4f4).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, &p1, &p2);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F4_f4f4> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F4_f4f4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, &p1, &p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F4_f4f4: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float4* CALL_PROC_EF_F4_f4f4f4(ref int code_pointer, in int function_id, float4* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p1 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p2 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p3 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_F4_f4f4f4).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, &p1, &p2, &p3);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_F4_f4f4f4> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_F4_f4f4f4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, &p1, &p2, &p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_F4_f4f4f4: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal void CALL_PROC_EF_b32(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   Bool32 p1 = Bool32.From(math.select(((Bool32*)vdata)[0].Unsigned, ~((Bool32*)vdata)[0].Unsigned, is_negated));
#if STANDALONE_VSBUILD
  (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_b32).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, &p1);
   return;
#else
   FunctionPointer<External.BlastEFDelegate_b32> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_b32>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, &p1);
       return;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_b32: error calling external function with id {function_id}");
#endif
   return;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal Bool32* CALL_PROC_EF_B32_b32(ref int code_pointer, in int function_id, Bool32* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   Bool32 p1 = Bool32.From(math.select(((Bool32*)vdata)[0].Unsigned, ~((Bool32*)vdata)[0].Unsigned, is_negated));
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_B32_b32).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, &p1);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_B32_b32> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_B32_b32>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, &p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_B32_b32: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal Bool32* CALL_PROC_EF_B32_b32f4f1(ref int code_pointer, in int function_id, Bool32* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   Bool32 p1 = Bool32.From(math.select(((Bool32*)vdata)[0].Unsigned, ~((Bool32*)vdata)[0].Unsigned, is_negated));
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p2 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p3 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_B32_b32f4f1).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, &p1, &p2, p3);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_B32_b32f4f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_B32_b32f4f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, &p1, &p2, p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_B32_b32f4f1: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal void CALL_PROC_EF_i1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   int p1 = ((int*)vdata)[0]; p1 = math.select(p1, -p1, is_negated);
#if STANDALONE_VSBUILD
  (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_i1).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
   return;
#else
   FunctionPointer<External.BlastEFDelegate_i1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_i1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
       return;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_i1: error calling external function with id {function_id}");
#endif
   return;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal int CALL_PROC_EF_I1_i1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   int p1 = ((int*)vdata)[0]; p1 = math.select(p1, -p1, is_negated);
   int result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_I1_i1).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_I1_i1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_I1_i1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_I1_i1: error calling external function with id {function_id}");
#endif
   return 0;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal int CALL_PROC_EF_I1_i1i1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   int p1 = ((int*)vdata)[0]; p1 = math.select(p1, -p1, is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   int p2 = ((int*)vdata)[0]; p2 = math.select(p2, -p2, is_negated);
   int result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_I1_i1i1).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_I1_i1i1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_I1_i1i1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_I1_i1i1: error calling external function with id {function_id}");
#endif
   return 0;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal int CALL_PROC_EF_I1_i1i1i1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   int p1 = ((int*)vdata)[0]; p1 = math.select(p1, -p1, is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   int p2 = ((int*)vdata)[0]; p2 = math.select(p2, -p2, is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   int p3 = ((int*)vdata)[0]; p3 = math.select(p3, -p3, is_negated);
   int result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_I1_i1i1i1).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2, p3);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_I1_i1i1i1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_I1_i1i1i1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, p2, p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_I1_i1i1i1: error calling external function with id {function_id}");
#endif
   return 0;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal int CALL_PROC_EF_I1_i1f3f3f3(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   int p1 = ((int*)vdata)[0]; p1 = math.select(p1, -p1, is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p2 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p3 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p4 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   int result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_I1_i1f3f3f3).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, &p2, &p3, &p4);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_I1_i1f3f3f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_I1_i1f3f3f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, &p2, &p3, &p4);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_I1_i1f3f3f3: error calling external function with id {function_id}");
#endif
   return 0;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal int CALL_PROC_EF_I1_i1f3f4f3(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   int p1 = ((int*)vdata)[0]; p1 = math.select(p1, -p1, is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p2 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p3 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p4 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   int result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_I1_i1f3f4f3).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, &p2, &p3, &p4);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_I1_i1f3f4f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_I1_i1f3f4f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, p1, &p2, &p3, &p4);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_I1_i1f3f4f3: error calling external function with id {function_id}");
#endif
   return 0;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal Bool32* CALL_PROC_EF_B32_i1f3f3f3(ref int code_pointer, in int function_id, Bool32* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   int p1 = ((int*)vdata)[0]; p1 = math.select(p1, -p1, is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p2 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p3 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p4 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_B32_i1f3f3f3).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, p1, &p2, &p3, &p4);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_B32_i1f3f3f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_B32_i1f3f3f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, p1, &p2, &p3, &p4);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_B32_i1f3f3f3: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal Bool32* CALL_PROC_EF_B32_i1f3f4f3(ref int code_pointer, in int function_id, Bool32* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   int p1 = ((int*)vdata)[0]; p1 = math.select(p1, -p1, is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p2 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p3 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p4 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFDelegate_B32_i1f3f4f3).Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, p1, &p2, &p3, &p4);
   return result;
#else
   FunctionPointer<External.BlastEFDelegate_B32_i1f3f4f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFDelegate_B32_i1f3f4f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, caller_ptr, result, p1, &p2, &p3, &p4);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFDelegate_B32_i1f3f4f3: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal void CALL_PROC_EF_SHORT(ref int code_pointer, in int function_id)
{
#if STANDALONE_VSBUILD
  (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate).Invoke();
   return;
#else
   FunctionPointer<External.BSEFDelegate> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       fp.Invoke();
       return;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate: error calling external function with id {function_id}");
#endif
   return;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_SHORT_F1(ref int code_pointer, in int function_id)
{
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1).Invoke();
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke();
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float2* CALL_PROC_EF_SHORT_F2(ref int code_pointer, in int function_id, float2* result)
{
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F2).Invoke(result);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F2> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(result);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F2: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float3* CALL_PROC_EF_SHORT_F3(ref int code_pointer, in int function_id, float3* result)
{
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F3).Invoke(result);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F3> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(result);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F3: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float4* CALL_PROC_EF_SHORT_F4(ref int code_pointer, in int function_id, float4* result)
{
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F4).Invoke(result);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F4> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(result);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F4: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal Bool32* CALL_PROC_EF_SHORT_B32(ref int code_pointer, in int function_id, Bool32* result)
{
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_B32).Invoke(result);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_B32> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_B32>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(result);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_B32: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_SHORT_F1_f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f1).Invoke(p1);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f1> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_SHORT_F1_f1f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p2 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f1f1).Invoke(p1, p2);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1, p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f1f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_SHORT_F1_f1f1f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p2 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p3 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f1f1f1).Invoke(p1, p2, p3);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f1f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f1f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1, p2, p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f1f1f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_SHORT_F1_f1f1f1f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p2 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p3 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p4 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f1f1f1f1).Invoke(p1, p2, p3, p4);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f1f1f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f1f1f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1, p2, p3, p4);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f1f1f1f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_SHORT_F1_f1f1f1f1f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p2 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p3 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p4 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p5 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f1f1f1f1f1).Invoke(p1, p2, p3, p4, p5);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f1f1f1f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f1f1f1f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1, p2, p3, p4, p5);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f1f1f1f1f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_SHORT_F1_f1f1f1f1f1f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p2 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p3 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p4 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p5 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p6 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f1f1f1f1f1f1).Invoke(p1, p2, p3, p4, p5, p6);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f1f1f1f1f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f1f1f1f1f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1, p2, p3, p4, p5, p6);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f1f1f1f1f1f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_SHORT_F1_f1f1f1f1f1f1f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p2 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p3 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p4 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p5 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p6 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p7 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f1f1f1f1f1f1f1).Invoke(p1, p2, p3, p4, p5, p6, p7);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f1f1f1f1f1f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f1f1f1f1f1f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1, p2, p3, p4, p5, p6, p7);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f1f1f1f1f1f1f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_SHORT_F1_f1f1f1f1f1f1f1f1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p1 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p2 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p3 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p4 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p5 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p6 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p7 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p8 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f1f1f1f1f1f1f1f1).Invoke(p1, p2, p3, p4, p5, p6, p7, p8);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f1f1f1f1f1f1f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f1f1f1f1f1f1f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1, p2, p3, p4, p5, p6, p7, p8);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f1f1f1f1f1f1f1f1: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_SHORT_F1_f2(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p1 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f2).Invoke(&p1);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f2> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(&p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f2: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_SHORT_F1_f2f2(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p1 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p2 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f2f2).Invoke(&p1, &p2);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f2f2> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f2f2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(&p1, &p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f2f2: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_SHORT_F1_f2f2f2(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p1 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p2 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p3 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f2f2f2).Invoke(&p1, &p2, &p3);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f2f2f2> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f2f2f2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(&p1, &p2, &p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f2f2f2: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_SHORT_F1_f3(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p1 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f3).Invoke(&p1);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f3> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(&p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f3: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_SHORT_F1_f3f3(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p1 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p2 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f3f3).Invoke(&p1, &p2);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f3f3> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f3f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(&p1, &p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f3f3: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_SHORT_F1_f3f3f3(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p1 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p2 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p3 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f3f3f3).Invoke(&p1, &p2, &p3);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f3f3f3> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f3f3f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(&p1, &p2, &p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f3f3f3: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_SHORT_F1_f4(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p1 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f4).Invoke(&p1);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f4> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(&p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f4: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_SHORT_F1_f4f4(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p1 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p2 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f4f4).Invoke(&p1, &p2);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f4f4> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f4f4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(&p1, &p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f4f4: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float CALL_PROC_EF_SHORT_F1_f4f4f4(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p1 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p2 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p3 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   float result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F1_f4f4f4).Invoke(&p1, &p2, &p3);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F1_f4f4f4> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F1_f4f4f4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(&p1, &p2, &p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F1_f4f4f4: error calling external function with id {function_id}");
#endif
   return float.NaN;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float2* CALL_PROC_EF_SHORT_F2_f2(ref int code_pointer, in int function_id, float2* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p1 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F2_f2).Invoke(result, &p1);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F2_f2> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F2_f2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(result, &p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F2_f2: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float2* CALL_PROC_EF_SHORT_F2_f2f2(ref int code_pointer, in int function_id, float2* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p1 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p2 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F2_f2f2).Invoke(result, &p1, &p2);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F2_f2f2> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F2_f2f2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(result, &p1, &p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F2_f2f2: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float2* CALL_PROC_EF_SHORT_F2_f2f2f2(ref int code_pointer, in int function_id, float2* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p1 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p2 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 2) goto CALLERROR;
#endif
   float2 p3 = math.select(((float2*)vdata)[0], -((float2*)vdata)[0], is_negated);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F2_f2f2f2).Invoke(result, &p1, &p2, &p3);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F2_f2f2f2> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F2_f2f2f2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(result, &p1, &p2, &p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F2_f2f2f2: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float3* CALL_PROC_EF_SHORT_F3_f3(ref int code_pointer, in int function_id, float3* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p1 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F3_f3).Invoke(result, &p1);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F3_f3> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F3_f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(result, &p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F3_f3: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float3* CALL_PROC_EF_SHORT_F3_f3f3(ref int code_pointer, in int function_id, float3* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p1 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p2 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F3_f3f3).Invoke(result, &p1, &p2);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F3_f3f3> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F3_f3f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(result, &p1, &p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F3_f3f3: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float3* CALL_PROC_EF_SHORT_F3_f3f3f3(ref int code_pointer, in int function_id, float3* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p1 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p2 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p3 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F3_f3f3f3).Invoke(result, &p1, &p2, &p3);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F3_f3f3f3> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F3_f3f3f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(result, &p1, &p2, &p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F3_f3f3f3: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float4* CALL_PROC_EF_SHORT_F4_f4(ref int code_pointer, in int function_id, float4* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p1 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F4_f4).Invoke(result, &p1);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F4_f4> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F4_f4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(result, &p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F4_f4: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float4* CALL_PROC_EF_SHORT_F4_f4f4(ref int code_pointer, in int function_id, float4* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p1 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p2 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F4_f4f4).Invoke(result, &p1, &p2);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F4_f4f4> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F4_f4f4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(result, &p1, &p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F4_f4f4: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float4* CALL_PROC_EF_SHORT_F4_f4f4f4(ref int code_pointer, in int function_id, float4* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p1 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p2 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p3 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_F4_f4f4f4).Invoke(result, &p1, &p2, &p3);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_F4_f4f4f4> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_F4_f4f4f4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(result, &p1, &p2, &p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_F4_f4f4f4: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal void CALL_PROC_EF_SHORT_b32(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   Bool32 p1 = Bool32.From(math.select(((Bool32*)vdata)[0].Unsigned, ~((Bool32*)vdata)[0].Unsigned, is_negated));
#if STANDALONE_VSBUILD
  (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_b32).Invoke(&p1);
   return;
#else
   FunctionPointer<External.BSEFDelegate_b32> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_b32>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       fp.Invoke(&p1);
       return;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_b32: error calling external function with id {function_id}");
#endif
   return;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal Bool32* CALL_PROC_EF_SHORT_B32_b32(ref int code_pointer, in int function_id, Bool32* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   Bool32 p1 = Bool32.From(math.select(((Bool32*)vdata)[0].Unsigned, ~((Bool32*)vdata)[0].Unsigned, is_negated));
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_B32_b32).Invoke(result, &p1);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_B32_b32> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_B32_b32>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(result, &p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_B32_b32: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal Bool32* CALL_PROC_EF_SHORT_B32_b32f4f1(ref int code_pointer, in int function_id, Bool32* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   Bool32 p1 = Bool32.From(math.select(((Bool32*)vdata)[0].Unsigned, ~((Bool32*)vdata)[0].Unsigned, is_negated));
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p2 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   float p3 = math.select(((float*)vdata)[0], -((float*)vdata)[0], is_negated);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_B32_b32f4f1).Invoke(result, &p1, &p2, p3);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_B32_b32f4f1> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_B32_b32f4f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(result, &p1, &p2, p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_B32_b32f4f1: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal void CALL_PROC_EF_SHORT_i1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   int p1 = ((int*)vdata)[0]; p1 = math.select(p1, -p1, is_negated);
#if STANDALONE_VSBUILD
  (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_i1).Invoke(p1);
   return;
#else
   FunctionPointer<External.BSEFDelegate_i1> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_i1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       fp.Invoke(p1);
       return;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_i1: error calling external function with id {function_id}");
#endif
   return;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal int CALL_PROC_EF_SHORT_I1_i1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   int p1 = ((int*)vdata)[0]; p1 = math.select(p1, -p1, is_negated);
   int result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_I1_i1).Invoke(p1);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_I1_i1> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_I1_i1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_I1_i1: error calling external function with id {function_id}");
#endif
   return 0;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal int CALL_PROC_EF_SHORT_I1_i1i1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   int p1 = ((int*)vdata)[0]; p1 = math.select(p1, -p1, is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   int p2 = ((int*)vdata)[0]; p2 = math.select(p2, -p2, is_negated);
   int result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_I1_i1i1).Invoke(p1, p2);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_I1_i1i1> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_I1_i1i1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1, p2);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_I1_i1i1: error calling external function with id {function_id}");
#endif
   return 0;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal int CALL_PROC_EF_SHORT_I1_i1i1i1(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   int p1 = ((int*)vdata)[0]; p1 = math.select(p1, -p1, is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   int p2 = ((int*)vdata)[0]; p2 = math.select(p2, -p2, is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   int p3 = ((int*)vdata)[0]; p3 = math.select(p3, -p3, is_negated);
   int result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_I1_i1i1i1).Invoke(p1, p2, p3);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_I1_i1i1i1> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_I1_i1i1i1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1, p2, p3);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_I1_i1i1i1: error calling external function with id {function_id}");
#endif
   return 0;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal int CALL_PROC_EF_SHORT_I1_i1f3f3f3(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   int p1 = ((int*)vdata)[0]; p1 = math.select(p1, -p1, is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p2 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p3 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p4 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   int result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_I1_i1f3f3f3).Invoke(p1, &p2, &p3, &p4);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_I1_i1f3f3f3> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_I1_i1f3f3f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1, &p2, &p3, &p4);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_I1_i1f3f3f3: error calling external function with id {function_id}");
#endif
   return 0;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal int CALL_PROC_EF_SHORT_I1_i1f3f4f3(ref int code_pointer, in int function_id)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   int p1 = ((int*)vdata)[0]; p1 = math.select(p1, -p1, is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p2 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p3 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p4 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   int result;
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_I1_i1f3f4f3).Invoke(p1, &p2, &p3, &p4);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_I1_i1f3f4f3> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_I1_i1f3f4f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(p1, &p2, &p3, &p4);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_I1_i1f3f4f3: error calling external function with id {function_id}");
#endif
   return 0;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal Bool32* CALL_PROC_EF_SHORT_B32_i1f3f3f3(ref int code_pointer, in int function_id, Bool32* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   int p1 = ((int*)vdata)[0]; p1 = math.select(p1, -p1, is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p2 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p3 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p4 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_B32_i1f3f3f3).Invoke(result, p1, &p2, &p3, &p4);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_B32_i1f3f3f3> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_B32_i1f3f3f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(result, p1, &p2, &p3, &p4);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_B32_i1f3f3f3: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal Bool32* CALL_PROC_EF_SHORT_B32_i1f3f4f3(ref int code_pointer, in int function_id, Bool32* result)
{
   byte vector_size;
   bool is_negated;
   BlastVariableDataType vtype;
  void* vdata;
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 1) goto CALLERROR;
#endif
   int p1 = ((int*)vdata)[0]; p1 = math.select(p1, -p1, is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p2 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 4) goto CALLERROR;
#endif
   float4 p3 = math.select(((float4*)vdata)[0], -((float4*)vdata)[0], is_negated);
   vdata = (void*)pop_p_info(ref code_pointer, out vtype, out vector_size, out is_negated);
#if TRACE
   if (vector_size != 3) goto CALLERROR;
#endif
   float3 p4 = math.select(((float3*)vdata)[0], -((float3*)vdata)[0], is_negated);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BSEFDelegate_B32_i1f3f4f3).Invoke(result, p1, &p2, &p3, &p4);
   return result;
#else
   FunctionPointer<External.BSEFDelegate_B32_i1f3f4f3> fp = engine_ptr->Functions[function_id].Generic<External.BSEFDelegate_B32_i1f3f4f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke(result, p1, &p2, &p3, &p4);
       return result;
    }
#endif
CALLERROR:
#if TRACE
    Debug.LogError($"Blast.interpretor.BSEFDelegate_B32_i1f3f4f3: error calling external function with id {function_id}");
#endif
   return null;
}

    }   

    #endregion 

}

namespace NSS.Blast.SSMD
{
    #region SSMD External Function Calls 

    unsafe public partial struct BlastSSMDInterpretor
    {
        internal void* CALL_EF(ref int code_pointer, in BlastScriptFunction function, int ssmd_datacount, void* temp)
{
    int id = function.FunctionId;
    byte delegate_type = function.FunctionDelegateId;

    switch(delegate_type)
    {
        case 90: CALL_PROC_EF_SSMD(ref code_pointer, id); return null;
        case 91: return CALL_PROC_EF_SSMD_F1(ref code_pointer, id, (float*)temp); 
        case 92: return CALL_PROC_EF_SSMD_F2(ref code_pointer, id, (float2*)temp);
        case 93: return CALL_PROC_EF_SSMD_F3(ref code_pointer, id, (float3*)temp); 
        case 94: return CALL_PROC_EF_SSMD_F4(ref code_pointer, id, (float4*)temp); 
        case 95: return CALL_PROC_EF_SSMD_B32(ref code_pointer, id, (Bool32*)temp); 
        case 96: return CALL_PROC_EF_SSMD_F1_f1(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 97: return CALL_PROC_EF_SSMD_F1_f1f1(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 98: return CALL_PROC_EF_SSMD_F1_f1f1f1(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 99: return CALL_PROC_EF_SSMD_F1_f1f1f1f1(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 100: return CALL_PROC_EF_SSMD_F1_f1f1f1f1f1(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 101: return CALL_PROC_EF_SSMD_F1_f1f1f1f1f1f1(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 102: return CALL_PROC_EF_SSMD_F1_f1f1f1f1f1f1f1(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 103: return CALL_PROC_EF_SSMD_F1_f1f1f1f1f1f1f1f1(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 104: return CALL_PROC_EF_SSMD_F1_f2(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 105: return CALL_PROC_EF_SSMD_F1_f2f2(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 106: return CALL_PROC_EF_SSMD_F1_f2f2f2(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 107: return CALL_PROC_EF_SSMD_F1_f3(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 108: return CALL_PROC_EF_SSMD_F1_f3f3(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 109: return CALL_PROC_EF_SSMD_F1_f3f3f3(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 110: return CALL_PROC_EF_SSMD_F1_f4(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 111: return CALL_PROC_EF_SSMD_F1_f4f4(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 112: return CALL_PROC_EF_SSMD_F1_f4f4f4(ref code_pointer, id, ssmd_datacount, (float*)temp); 
        case 113: return CALL_PROC_EF_SSMD_F2_f2(ref code_pointer, id, ssmd_datacount, (float2*)temp);
        case 114: return CALL_PROC_EF_SSMD_F2_f2f2(ref code_pointer, id, ssmd_datacount, (float2*)temp);
        case 115: return CALL_PROC_EF_SSMD_F2_f2f2f2(ref code_pointer, id, ssmd_datacount, (float2*)temp);
        case 116: return CALL_PROC_EF_SSMD_F3_f3(ref code_pointer, id, ssmd_datacount, (float3*)temp); 
        case 117: return CALL_PROC_EF_SSMD_F3_f3f3(ref code_pointer, id, ssmd_datacount, (float3*)temp); 
        case 118: return CALL_PROC_EF_SSMD_F3_f3f3f3(ref code_pointer, id, ssmd_datacount, (float3*)temp); 
        case 119: return CALL_PROC_EF_SSMD_F4_f4(ref code_pointer, id, ssmd_datacount, (float4*)temp); 
        case 120: return CALL_PROC_EF_SSMD_F4_f4f4(ref code_pointer, id, ssmd_datacount, (float4*)temp); 
        case 121: return CALL_PROC_EF_SSMD_F4_f4f4f4(ref code_pointer, id, ssmd_datacount, (float4*)temp); 
        case 122: CALL_PROC_EF_SSMD_b32(ref code_pointer, id, ssmd_datacount); return null;
        case 123: return CALL_PROC_EF_SSMD_B32_b32(ref code_pointer, id, ssmd_datacount, (Bool32*)temp); 
        case 124: return CALL_PROC_EF_SSMD_B32_b32f4f1(ref code_pointer, id, ssmd_datacount, (Bool32*)temp); 
    }

    return null;
}


        [MethodImpl(MethodImplOptions.AggressiveInlining)]
internal void CALL_PROC_EF_SSMD(ref int code_pointer, in int function_id)
{
#if STANDALONE_VSBUILD
  (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate).Invoke((IntPtr)engine_ptr, environment_ptr);
   return;
#else
   FunctionPointer<External.BlastEFSSMDDelegate> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       fp.Invoke((IntPtr)engine_ptr, environment_ptr);
       return;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate: error calling external function with id {function_id}");
#endif
   return;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float* CALL_PROC_EF_SSMD_F1(ref int code_pointer, in int function_id, float* result)
{
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1).Invoke((IntPtr)engine_ptr, environment_ptr, result, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float2* CALL_PROC_EF_SSMD_F2(ref int code_pointer, in int function_id, float2* result)
{
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F2).Invoke((IntPtr)engine_ptr, environment_ptr, result, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F2> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F2: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float3* CALL_PROC_EF_SSMD_F3(ref int code_pointer, in int function_id, float3* result)
{
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F3).Invoke((IntPtr)engine_ptr, environment_ptr, result, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F3: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal float4* CALL_PROC_EF_SSMD_F4(ref int code_pointer, in int function_id, float4* result)
{
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F4).Invoke((IntPtr)engine_ptr, environment_ptr, result, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F4> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F4: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.AggressiveInlining)]
internal Bool32* CALL_PROC_EF_SSMD_B32(ref int code_pointer, in int function_id, Bool32* result)
{
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_B32).Invoke((IntPtr)engine_ptr, environment_ptr, result, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_B32> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_B32>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_B32: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f1(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float* p1 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p1);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f1).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f1: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f1f1(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float* p1 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p1);
   float* p2 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p2);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f1f1).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f1f1: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f1f1f1(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float* p1 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p1);
   float* p2 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p2);
   float* p3 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p3);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f1f1f1).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f1f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f1f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f1f1f1: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f1f1f1f1(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float* p1 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p1);
   float* p2 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p2);
   float* p3 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p3);
   float* p4 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p4);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f1f1f1f1).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, p4, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f1f1f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f1f1f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, p4, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f1f1f1f1: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f1f1f1f1f1(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float* p1 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p1);
   float* p2 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p2);
   float* p3 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p3);
   float* p4 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p4);
   float* p5 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p5);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f1f1f1f1f1).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, p4, p5, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f1f1f1f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f1f1f1f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, p4, p5, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f1f1f1f1f1: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f1f1f1f1f1f1(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float* p1 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p1);
   float* p2 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p2);
   float* p3 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p3);
   float* p4 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p4);
   float* p5 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p5);
   float* p6 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p6);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f1f1f1f1f1f1).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, p4, p5, p6, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f1f1f1f1f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f1f1f1f1f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, p4, p5, p6, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f1f1f1f1f1f1: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f1f1f1f1f1f1f1(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float* p1 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p1);
   float* p2 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p2);
   float* p3 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p3);
   float* p4 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p4);
   float* p5 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p5);
   float* p6 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p6);
   float* p7 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p7);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f1f1f1f1f1f1f1).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, p4, p5, p6, p7, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f1f1f1f1f1f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f1f1f1f1f1f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, p4, p5, p6, p7, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f1f1f1f1f1f1f1: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f1f1f1f1f1f1f1f1(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float* p1 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p1);
   float* p2 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p2);
   float* p3 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p3);
   float* p4 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p4);
   float* p5 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p5);
   float* p6 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p6);
   float* p7 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p7);
   float* p8 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p8);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f1f1f1f1f1f1f1f1).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, p4, p5, p6, p7, p8, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f1f1f1f1f1f1f1f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f1f1f1f1f1f1f1f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, p4, p5, p6, p7, p8, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f1f1f1f1f1f1f1f1: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f2(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float2* p1 = stackalloc float2[ssmd_datacount];
   pop_fx_into_ref<float2>(ref code_pointer, p1);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f2).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f2> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f2: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f2f2(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float2* p1 = stackalloc float2[ssmd_datacount];
   pop_fx_into_ref<float2>(ref code_pointer, p1);
   float2* p2 = stackalloc float2[ssmd_datacount];
   pop_fx_into_ref<float2>(ref code_pointer, p2);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f2f2).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f2f2> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f2f2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f2f2: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f2f2f2(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float2* p1 = stackalloc float2[ssmd_datacount];
   pop_fx_into_ref<float2>(ref code_pointer, p1);
   float2* p2 = stackalloc float2[ssmd_datacount];
   pop_fx_into_ref<float2>(ref code_pointer, p2);
   float2* p3 = stackalloc float2[ssmd_datacount];
   pop_fx_into_ref<float2>(ref code_pointer, p3);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f2f2f2).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f2f2f2> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f2f2f2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f2f2f2: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f3(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float3* p1 = stackalloc float3[ssmd_datacount];
   pop_fx_into_ref<float3>(ref code_pointer, p1);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f3).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f3: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f3f3(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float3* p1 = stackalloc float3[ssmd_datacount];
   pop_fx_into_ref<float3>(ref code_pointer, p1);
   float3* p2 = stackalloc float3[ssmd_datacount];
   pop_fx_into_ref<float3>(ref code_pointer, p2);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f3f3).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f3f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f3f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f3f3: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f3f3f3(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float3* p1 = stackalloc float3[ssmd_datacount];
   pop_fx_into_ref<float3>(ref code_pointer, p1);
   float3* p2 = stackalloc float3[ssmd_datacount];
   pop_fx_into_ref<float3>(ref code_pointer, p2);
   float3* p3 = stackalloc float3[ssmd_datacount];
   pop_fx_into_ref<float3>(ref code_pointer, p3);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f3f3f3).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f3f3f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f3f3f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f3f3f3: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f4(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float4* p1 = stackalloc float4[ssmd_datacount];
   pop_fx_into_ref<float4>(ref code_pointer, p1);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f4).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f4> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f4: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f4f4(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float4* p1 = stackalloc float4[ssmd_datacount];
   pop_fx_into_ref<float4>(ref code_pointer, p1);
   float4* p2 = stackalloc float4[ssmd_datacount];
   pop_fx_into_ref<float4>(ref code_pointer, p2);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f4f4).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f4f4> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f4f4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f4f4: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float* CALL_PROC_EF_SSMD_F1_f4f4f4(ref int code_pointer, in int function_id, int ssmd_datacount, float* result)
{
   float4* p1 = stackalloc float4[ssmd_datacount];
   pop_fx_into_ref<float4>(ref code_pointer, p1);
   float4* p2 = stackalloc float4[ssmd_datacount];
   pop_fx_into_ref<float4>(ref code_pointer, p2);
   float4* p3 = stackalloc float4[ssmd_datacount];
   pop_fx_into_ref<float4>(ref code_pointer, p3);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F1_f4f4f4).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F1_f4f4f4> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F1_f4f4f4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F1_f4f4f4: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float2* CALL_PROC_EF_SSMD_F2_f2(ref int code_pointer, in int function_id, int ssmd_datacount, float2* result)
{
   float2* p1 = stackalloc float2[ssmd_datacount];
   pop_fx_into_ref<float2>(ref code_pointer, p1);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F2_f2).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F2_f2> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F2_f2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F2_f2: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float2* CALL_PROC_EF_SSMD_F2_f2f2(ref int code_pointer, in int function_id, int ssmd_datacount, float2* result)
{
   float2* p1 = stackalloc float2[ssmd_datacount];
   pop_fx_into_ref<float2>(ref code_pointer, p1);
   float2* p2 = stackalloc float2[ssmd_datacount];
   pop_fx_into_ref<float2>(ref code_pointer, p2);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F2_f2f2).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F2_f2f2> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F2_f2f2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F2_f2f2: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float2* CALL_PROC_EF_SSMD_F2_f2f2f2(ref int code_pointer, in int function_id, int ssmd_datacount, float2* result)
{
   float2* p1 = stackalloc float2[ssmd_datacount];
   pop_fx_into_ref<float2>(ref code_pointer, p1);
   float2* p2 = stackalloc float2[ssmd_datacount];
   pop_fx_into_ref<float2>(ref code_pointer, p2);
   float2* p3 = stackalloc float2[ssmd_datacount];
   pop_fx_into_ref<float2>(ref code_pointer, p3);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F2_f2f2f2).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F2_f2f2f2> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F2_f2f2f2>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F2_f2f2f2: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float3* CALL_PROC_EF_SSMD_F3_f3(ref int code_pointer, in int function_id, int ssmd_datacount, float3* result)
{
   float3* p1 = stackalloc float3[ssmd_datacount];
   pop_fx_into_ref<float3>(ref code_pointer, p1);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F3_f3).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F3_f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F3_f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F3_f3: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float3* CALL_PROC_EF_SSMD_F3_f3f3(ref int code_pointer, in int function_id, int ssmd_datacount, float3* result)
{
   float3* p1 = stackalloc float3[ssmd_datacount];
   pop_fx_into_ref<float3>(ref code_pointer, p1);
   float3* p2 = stackalloc float3[ssmd_datacount];
   pop_fx_into_ref<float3>(ref code_pointer, p2);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F3_f3f3).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F3_f3f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F3_f3f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F3_f3f3: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float3* CALL_PROC_EF_SSMD_F3_f3f3f3(ref int code_pointer, in int function_id, int ssmd_datacount, float3* result)
{
   float3* p1 = stackalloc float3[ssmd_datacount];
   pop_fx_into_ref<float3>(ref code_pointer, p1);
   float3* p2 = stackalloc float3[ssmd_datacount];
   pop_fx_into_ref<float3>(ref code_pointer, p2);
   float3* p3 = stackalloc float3[ssmd_datacount];
   pop_fx_into_ref<float3>(ref code_pointer, p3);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F3_f3f3f3).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F3_f3f3f3> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F3_f3f3f3>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F3_f3f3f3: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float4* CALL_PROC_EF_SSMD_F4_f4(ref int code_pointer, in int function_id, int ssmd_datacount, float4* result)
{
   float4* p1 = stackalloc float4[ssmd_datacount];
   pop_fx_into_ref<float4>(ref code_pointer, p1);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F4_f4).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F4_f4> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F4_f4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F4_f4: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float4* CALL_PROC_EF_SSMD_F4_f4f4(ref int code_pointer, in int function_id, int ssmd_datacount, float4* result)
{
   float4* p1 = stackalloc float4[ssmd_datacount];
   pop_fx_into_ref<float4>(ref code_pointer, p1);
   float4* p2 = stackalloc float4[ssmd_datacount];
   pop_fx_into_ref<float4>(ref code_pointer, p2);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F4_f4f4).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F4_f4f4> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F4_f4f4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F4_f4f4: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal float4* CALL_PROC_EF_SSMD_F4_f4f4f4(ref int code_pointer, in int function_id, int ssmd_datacount, float4* result)
{
   float4* p1 = stackalloc float4[ssmd_datacount];
   pop_fx_into_ref<float4>(ref code_pointer, p1);
   float4* p2 = stackalloc float4[ssmd_datacount];
   pop_fx_into_ref<float4>(ref code_pointer, p2);
   float4* p3 = stackalloc float4[ssmd_datacount];
   pop_fx_into_ref<float4>(ref code_pointer, p3);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_F4_f4f4f4).Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_F4_f4f4f4> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_F4_f4f4f4>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, p1, p2, p3, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_F4_f4f4f4: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal void CALL_PROC_EF_SSMD_b32(ref int code_pointer, in int function_id, int ssmd_datacount)
{
   float* p1 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p1);
#if STANDALONE_VSBUILD
  (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_b32).Invoke((IntPtr)engine_ptr, environment_ptr, (Bool32*)(p1), ssmd_datacount);
   return;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_b32> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_b32>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       fp.Invoke((IntPtr)engine_ptr, environment_ptr, (Bool32*)(p1), ssmd_datacount);
       return;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_b32: error calling external function with id {function_id}");
#endif
   return;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal Bool32* CALL_PROC_EF_SSMD_B32_b32(ref int code_pointer, in int function_id, int ssmd_datacount, Bool32* result)
{
   float* p1 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p1);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_B32_b32).Invoke((IntPtr)engine_ptr, environment_ptr, result, (Bool32*)(p1), ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_B32_b32> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_B32_b32>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, (Bool32*)(p1), ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_B32_b32: error calling external function with id {function_id}");
#endif
   return null;
}
[MethodImpl(MethodImplOptions.NoInlining)]
internal Bool32* CALL_PROC_EF_SSMD_B32_b32f4f1(ref int code_pointer, in int function_id, int ssmd_datacount, Bool32* result)
{
   float* p1 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p1);
   float4* p2 = stackalloc float4[ssmd_datacount];
   pop_fx_into_ref<float4>(ref code_pointer, p2);
   float* p3 = stackalloc float[ssmd_datacount];
   pop_fx_into_ref<float>(ref code_pointer, p3);
#if STANDALONE_VSBUILD
   result = (Blast.Instance.API.FunctionInfo[function_id].FunctionDelegate as External.BlastEFSSMDDelegate_B32_b32f4f1).Invoke((IntPtr)engine_ptr, environment_ptr, result, (Bool32*)(p1), p2, p3, ssmd_datacount);
   return result;
#else
   FunctionPointer<External.BlastEFSSMDDelegate_B32_b32f4f1> fp = engine_ptr->Functions[function_id].Generic<External.BlastEFSSMDDelegate_B32_b32f4f1>();
    if (fp.IsCreated && fp.Value != IntPtr.Zero)
    {
       result = fp.Invoke((IntPtr)engine_ptr, environment_ptr, result, (Bool32*)(p1), p2, p3, ssmd_datacount);
       return result;
    }
#endif
#if TRACE
    Debug.LogError($"Blast.interpretor.BlastEFSSMDDelegate_B32_b32f4f1: error calling external function with id {function_id}");
#endif
   return null;
}

    }

    #endregion

}

#pragma warning restore CS1591
