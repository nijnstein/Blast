
a = 1 * -2;						# -2
b = -1 * 2;						# -2
c = a / b;						# 1
d = c * 100;					# 100
e = 1 + 2 * 2; 					# 5
f = 1 + 2 * 2 + 5;				# 10
g = 1 + 2 / 6;					# 1.3333    
h = 1 + -2 / 6;					# 0.6666
i = 1 - 2 * 2 + 5;				# 2 
j = 1 + 2 * 2 - 5;				# 0 
k = 1 +-2 * 2 + 5;				# 2 
l = 1 + 1 + 1;                  # should all optimize to adda or suba
m = 1 - 1 - 1 - 1; 
n = 1 + 1 + 1 + 1 + 1;
o = 1 - 1 - 1 - 1 - 1 + 1 + 1;  # suba and adda 
t = 1 + 1 + 1 + 1 + 1 + 1 + 1;  # 1 more then in patterns  
p = 2 * 2 * 2;					# should all optimize to mula
q = 2 * 2 * 2 * 2;				# mula
r = 2 * 2 * 2 / 2 * 2;			# division is inverted by analyser, optimizer converts to mula
s = a * e * j * g * v / 2; 	    # mula
u = 2 * 2 * 2 * 2 * 2 * 2 * 2;  # 1 more then defined in mula optimizer pattern... todo?? 
v = 2 / 2 / 2 / 2 / 2 / 2; 		# is replaced by multiplications by analyser and then by optimizer t a mula instruction :P
w = a / b / c / d;              # this will optimize into a diva
x = a * (b / 2) * 2;
y = (a * b) * 2;
z = (a * b) + b * (a + b);

aa = 1 + 1 * (1 / 2) * 2;	    # == 2 the div wil convert to * then the statement will result in mula4 by the optimizer pattern (before analyser could do this)
ab = 2 * (2 * 2 * 2) * 2;       # == 32 this should result in a mula5, would could remove the () in this case in the analyser..    could use optimizer ...
ac = 2 - 2 - 2 - 2 - 2 - 2; 	# == -8
ad = 1 & -2 | 1;        		# == 1.0f
ae = 1 & 2 & 3 & 4 & 5;			# should result in math.all via opcode all
ag = 1 * 10 * 3 * (3 + 4 * 2);	 # 330


#validate a -2
#validate b -2
#validate c 1 
#validate d 100

#validate ag 330